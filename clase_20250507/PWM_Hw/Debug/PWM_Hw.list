
PWM_Hw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022dc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002470  08002470  00003470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002480  08002480  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002480  08002480  00003480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002488  08002488  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002488  08002488  00003488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800248c  0800248c  0000348c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002490  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800249c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800249c  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000899d  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001624  00000000  00000000  0000c9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0000e000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000749  00000000  00000000  0000e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000151dc  00000000  00000000  0000f0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5c1  00000000  00000000  0002429d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008743a  00000000  00000000  0002e85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5c98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002724  00000000  00000000  000b5cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000b8400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002458 	.word	0x08002458

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002458 	.word	0x08002458

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/* Global variables ----*/
extern TIM_HandleTypeDef hpwm;

/* Main Function ----*/
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  // Hardware Initialize
  Hw_Init();
 8000504:	f000 f810 	bl	8000528 <Hw_Init>

  // PWM Start
  HAL_TIM_PWM_Start(&hpwm, TIM_CHANNEL_1);
 8000508:	2100      	movs	r1, #0
 800050a:	4806      	ldr	r0, [pc, #24]	@ (8000524 <main+0x24>)
 800050c:	f001 f99a 	bl	8001844 <HAL_TIM_PWM_Start>
  // Infinite Loop
  while (1)
  {

	// To Stop PWM
	HAL_Delay(500);
 8000510:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000514:	f000 fa3c 	bl	8000990 <HAL_Delay>
	HAL_TIM_PWM_Stop(&hpwm, TIM_CHANNEL_1);
 8000518:	2100      	movs	r1, #0
 800051a:	4802      	ldr	r0, [pc, #8]	@ (8000524 <main+0x24>)
 800051c:	f001 fa42 	bl	80019a4 <HAL_TIM_PWM_Stop>
	HAL_Delay(500);
 8000520:	bf00      	nop
 8000522:	e7f5      	b.n	8000510 <main+0x10>
 8000524:	20000028 	.word	0x20000028

08000528 <Hw_Init>:
TIM_HandleTypeDef hpwm; // TIM2 Handler Variable --> Software

/* Public Function Definitions ------------*/

/* Hardware Configuration */
uint8_t Hw_Init(void){
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0

	/* HAL Initialization	*/
	HAL_Init(); // --> Init Software
 800052c:	f000 f9be 	bl	80008ac <HAL_Init>

	/* CLK Configuration */
	SystemClock_Config(); // --> Init Hardware
 8000530:	f000 f808 	bl	8000544 <SystemClock_Config>

	/* TIM2 Configuration */
	TIM2_Config(); // --> Init Hardware
 8000534:	f000 f8aa 	bl	800068c <TIM2_Config>

	/* GPIO Configuration */
	GPIO_Config(); // --> Init Hardware
 8000538:	f000 f85a 	bl	80005f0 <GPIO_Config>

	return(1);
 800053c:	2301      	movs	r3, #1
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <SystemClock_Config>:


/* CLK Configuration */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	@ 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	@ 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f001 ff54 	bl	8002400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <SystemClock_Config+0xa4>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000570:	4a1d      	ldr	r2, [pc, #116]	@ (80005e8 <SystemClock_Config+0xa4>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	@ 0x40
 8000578:	4b1b      	ldr	r3, [pc, #108]	@ (80005e8 <SystemClock_Config+0xa4>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <SystemClock_Config+0xa8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000590:	4a16      	ldr	r2, [pc, #88]	@ (80005ec <SystemClock_Config+0xa8>)
 8000592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b14      	ldr	r3, [pc, #80]	@ (80005ec <SystemClock_Config+0xa8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2310      	movs	r3, #16
 80005ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fc77 	bl	8000eac <HAL_RCC_OscConfig>

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fedf 	bl	800139c <HAL_RCC_ClockConfig>

  return;
 80005de:	bf00      	nop
}
 80005e0:	3750      	adds	r7, #80	@ 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <GPIO_Config>:

/* GPIO Configuration */
void GPIO_Config(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef PWM_Pin_Conf = {0};
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

	/* GPIO Port Hardware Enable */
	// --> Hardware
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	4b1e      	ldr	r3, [pc, #120]	@ (8000684 <GPIO_Config+0x94>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a1d      	ldr	r2, [pc, #116]	@ (8000684 <GPIO_Config+0x94>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <GPIO_Config+0x94>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <GPIO_Config+0x94>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a16      	ldr	r2, [pc, #88]	@ (8000684 <GPIO_Config+0x94>)
 800062c:	f043 0302 	orr.w	r3, r3, #2
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <GPIO_Config+0x94>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4b10      	ldr	r3, [pc, #64]	@ (8000684 <GPIO_Config+0x94>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a0f      	ldr	r2, [pc, #60]	@ (8000684 <GPIO_Config+0x94>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <GPIO_Config+0x94>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

	/* PWM Pin Features Load */
	// --> Software
	PWM_Pin_Conf.Pin = PWM_PIN;
 800065a:	2301      	movs	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
	PWM_Pin_Conf.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	613b      	str	r3, [r7, #16]
	PWM_Pin_Conf.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
	PWM_Pin_Conf.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
	PWM_Pin_Conf.Alternate = GPIO_AF1_TIM2;
 800066a:	2301      	movs	r3, #1
 800066c:	61fb      	str	r3, [r7, #28]

	/* PWM Pin Hardware Configuration */
	// --> Hardware
	HAL_GPIO_Init(PWM_PORT, &PWM_Pin_Conf);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4619      	mov	r1, r3
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <GPIO_Config+0x98>)
 8000676:	f000 fa95 	bl	8000ba4 <HAL_GPIO_Init>

	return;
 800067a:	bf00      	nop
}
 800067c:	3720      	adds	r7, #32
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000

0800068c <TIM2_Config>:

/* TIM2 Configuration */
void TIM2_Config(void){
 800068c:	b580      	push	{r7, lr}
 800068e:	b08e      	sub	sp, #56	@ 0x38
 8000690:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef CLK_Source = {0};
 8000692:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef PWM_Config = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
 80006b8:	615a      	str	r2, [r3, #20]
 80006ba:	619a      	str	r2, [r3, #24]

	/*  TIM Features Load */
	// --> Software
	hpwm.Instance = PWM_TIMER;
 80006bc:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <TIM2_Config+0xb4>)
 80006be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006c2:	601a      	str	r2, [r3, #0]
	hpwm.Init.Prescaler = PWM_PRESCALER-1;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <TIM2_Config+0xb4>)
 80006c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006ca:	605a      	str	r2, [r3, #4]
	hpwm.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <TIM2_Config+0xb4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
	hpwm.Init.Period = _PWMPeriod(100); // 100 [ms]
 80006d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <TIM2_Config+0xb4>)
 80006d4:	f240 623f 	movw	r2, #1599	@ 0x63f
 80006d8:	60da      	str	r2, [r3, #12]
	hpwm.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006da:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <TIM2_Config+0xb4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
	hpwm.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006e0:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <TIM2_Config+0xb4>)
 80006e2:	2280      	movs	r2, #128	@ 0x80
 80006e4:	619a      	str	r2, [r3, #24]

	/* TIM Initialize */
	HAL_TIM_Base_Init(&hpwm); // --> Software
 80006e6:	4816      	ldr	r0, [pc, #88]	@ (8000740 <TIM2_Config+0xb4>)
 80006e8:	f001 f804 	bl	80016f4 <HAL_TIM_Base_Init>

	/* CLK Source Selection */
	CLK_Source.ClockSource = TIM_CLOCKSOURCE_INTERNAL; // --> Software
 80006ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_TIM_ConfigClockSource(&hpwm, &CLK_Source); // --> Hardware
 80006f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006f6:	4619      	mov	r1, r3
 80006f8:	4811      	ldr	r0, [pc, #68]	@ (8000740 <TIM2_Config+0xb4>)
 80006fa:	f001 fa79 	bl	8001bf0 <HAL_TIM_ConfigClockSource>

	/* PWM Initialize */
	HAL_TIM_PWM_Init(&hpwm); // --> Software
 80006fe:	4810      	ldr	r0, [pc, #64]	@ (8000740 <TIM2_Config+0xb4>)
 8000700:	f001 f847 	bl	8001792 <HAL_TIM_PWM_Init>

	/* TIM OVF Interrupt Config */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE; // --> Software
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_TIMEx_MasterConfigSynchronization(&hpwm, &sMasterConfig); // --> Hardware
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4619      	mov	r1, r3
 8000712:	480b      	ldr	r0, [pc, #44]	@ (8000740 <TIM2_Config+0xb4>)
 8000714:	f001 fe06 	bl	8002324 <HAL_TIMEx_MasterConfigSynchronization>

	/* PWM Features Load */
	// --> Software
	PWM_Config.OCMode = TIM_OCMODE_PWM1;
 8000718:	2360      	movs	r3, #96	@ 0x60
 800071a:	607b      	str	r3, [r7, #4]
	PWM_Config.Pulse = _PWMDutty(30, _PWMPeriod(100)); // 30%
 800071c:	f240 13df 	movw	r3, #479	@ 0x1df
 8000720:	60bb      	str	r3, [r7, #8]
	PWM_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
	PWM_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]

	/* PWM Hardware Configuration */
	// --> Software
	HAL_TIM_PWM_ConfigChannel(&hpwm, &PWM_Config, TIM_CHANNEL_1);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	4619      	mov	r1, r3
 8000730:	4803      	ldr	r0, [pc, #12]	@ (8000740 <TIM2_Config+0xb4>)
 8000732:	f001 f99b 	bl	8001a6c <HAL_TIM_PWM_ConfigChannel>

	// After this call, the GPIO PA0 of PWM CH1 may be configured (not before!!)

	return;
 8000736:	bf00      	nop
}
 8000738:	3738      	adds	r7, #56	@ 0x38
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000028 	.word	0x20000028

08000744 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000752:	4a0f      	ldr	r2, [pc, #60]	@ (8000790 <HAL_MspInit+0x4c>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000758:	6453      	str	r3, [r2, #68]	@ 0x44
 800075a:	4b0d      	ldr	r3, [pc, #52]	@ (8000790 <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	4a08      	ldr	r2, [pc, #32]	@ (8000790 <HAL_MspInit+0x4c>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	@ 0x40
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800

08000794 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007a4:	d10d      	bne.n	80007c2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <HAL_TIM_Base_MspInit+0x3c>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	4a08      	ldr	r2, [pc, #32]	@ (80007d0 <HAL_TIM_Base_MspInit+0x3c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <HAL_TIM_Base_MspInit+0x3c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <NMI_Handler+0x4>

080007dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <MemManage_Handler+0x4>

080007ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082a:	f000 f891 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	@ (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000890 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800085c:	f7ff ffea 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000862:	490d      	ldr	r1, [pc, #52]	@ (8000898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000864:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000878:	4c0a      	ldr	r4, [pc, #40]	@ (80008a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000886:	f001 fdc3 	bl	8002410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800088a:	f7ff fe39 	bl	8000500 <main>
  bx  lr    
 800088e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000890:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800089c:	08002490 	.word	0x08002490
  ldr r2, =_sbss
 80008a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a4:	20000074 	.word	0x20000074

080008a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC_IRQHandler>
	...

080008ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008b0:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <HAL_Init+0x40>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0d      	ldr	r2, [pc, #52]	@ (80008ec <HAL_Init+0x40>)
 80008b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <HAL_Init+0x40>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <HAL_Init+0x40>)
 80008c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <HAL_Init+0x40>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a07      	ldr	r2, [pc, #28]	@ (80008ec <HAL_Init+0x40>)
 80008ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 f931 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008da:	200f      	movs	r0, #15
 80008dc:	f000 f808 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e0:	f7ff ff30 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023c00 	.word	0x40023c00

080008f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_InitTick+0x54>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_InitTick+0x58>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000906:	fbb3 f3f1 	udiv	r3, r3, r1
 800090a:	fbb2 f3f3 	udiv	r3, r2, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f93b 	bl	8000b8a <HAL_SYSTICK_Config>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e00e      	b.n	800093c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	d80a      	bhi.n	800093a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f000 f911 	bl	8000b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000930:	4a06      	ldr	r2, [pc, #24]	@ (800094c <HAL_InitTick+0x5c>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	e000      	b.n	800093c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000000 	.word	0x20000000
 8000948:	20000008 	.word	0x20000008
 800094c:	20000004 	.word	0x20000004

08000950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_IncTick+0x20>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_IncTick+0x24>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <HAL_IncTick+0x24>)
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000008 	.word	0x20000008
 8000974:	20000070 	.word	0x20000070

08000978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <HAL_GetTick+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000070 	.word	0x20000070

08000990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000998:	f7ff ffee 	bl	8000978 <HAL_GetTick>
 800099c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a8:	d005      	beq.n	80009b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009aa:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <HAL_Delay+0x44>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009b6:	bf00      	nop
 80009b8:	f7ff ffde 	bl	8000978 <HAL_GetTick>
 80009bc:	4602      	mov	r2, r0
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d8f7      	bhi.n	80009b8 <HAL_Delay+0x28>
  {
  }
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000008 	.word	0x20000008

080009d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f4:	4013      	ands	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0a:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	60d3      	str	r3, [r2, #12]
}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a24:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <__NVIC_GetPriorityGrouping+0x18>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	f003 0307 	and.w	r3, r3, #7
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db0a      	blt.n	8000a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	490c      	ldr	r1, [pc, #48]	@ (8000a88 <__NVIC_SetPriority+0x4c>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	0112      	lsls	r2, r2, #4
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	440b      	add	r3, r1
 8000a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a64:	e00a      	b.n	8000a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4908      	ldr	r1, [pc, #32]	@ (8000a8c <__NVIC_SetPriority+0x50>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	f003 030f 	and.w	r3, r3, #15
 8000a72:	3b04      	subs	r3, #4
 8000a74:	0112      	lsls	r2, r2, #4
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	440b      	add	r3, r1
 8000a7a:	761a      	strb	r2, [r3, #24]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	@ 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	f1c3 0307 	rsb	r3, r3, #7
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	bf28      	it	cs
 8000aae:	2304      	movcs	r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	d902      	bls.n	8000ac0 <NVIC_EncodePriority+0x30>
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3b03      	subs	r3, #3
 8000abe:	e000      	b.n	8000ac2 <NVIC_EncodePriority+0x32>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43d9      	mvns	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	4313      	orrs	r3, r2
         );
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3724      	adds	r7, #36	@ 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b08:	d301      	bcc.n	8000b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00f      	b.n	8000b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <SysTick_Config+0x40>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b16:	210f      	movs	r1, #15
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f7ff ff8e 	bl	8000a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <SysTick_Config+0x40>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b26:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <SysTick_Config+0x40>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff47 	bl	80009d8 <__NVIC_SetPriorityGrouping>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b64:	f7ff ff5c 	bl	8000a20 <__NVIC_GetPriorityGrouping>
 8000b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	6978      	ldr	r0, [r7, #20]
 8000b70:	f7ff ff8e 	bl	8000a90 <NVIC_EncodePriority>
 8000b74:	4602      	mov	r2, r0
 8000b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff5d 	bl	8000a3c <__NVIC_SetPriority>
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ffb0 	bl	8000af8 <SysTick_Config>
 8000b98:	4603      	mov	r3, r0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	@ 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
 8000bbe:	e159      	b.n	8000e74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	f040 8148 	bne.w	8000e6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d005      	beq.n	8000bf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d130      	bne.n	8000c58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	68da      	ldr	r2, [r3, #12]
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	091b      	lsrs	r3, r3, #4
 8000c42:	f003 0201 	and.w	r2, r3, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	d017      	beq.n	8000c94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	2203      	movs	r2, #3
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d123      	bne.n	8000ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	08da      	lsrs	r2, r3, #3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3208      	adds	r2, #8
 8000ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	220f      	movs	r2, #15
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	691a      	ldr	r2, [r3, #16]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	08da      	lsrs	r2, r3, #3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3208      	adds	r2, #8
 8000ce2:	69b9      	ldr	r1, [r7, #24]
 8000ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0203 	and.w	r2, r3, #3
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f000 80a2 	beq.w	8000e6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b57      	ldr	r3, [pc, #348]	@ (8000e8c <HAL_GPIO_Init+0x2e8>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	4a56      	ldr	r2, [pc, #344]	@ (8000e8c <HAL_GPIO_Init+0x2e8>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3a:	4b54      	ldr	r3, [pc, #336]	@ (8000e8c <HAL_GPIO_Init+0x2e8>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d46:	4a52      	ldr	r2, [pc, #328]	@ (8000e90 <HAL_GPIO_Init+0x2ec>)
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a49      	ldr	r2, [pc, #292]	@ (8000e94 <HAL_GPIO_Init+0x2f0>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d019      	beq.n	8000da6 <HAL_GPIO_Init+0x202>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a48      	ldr	r2, [pc, #288]	@ (8000e98 <HAL_GPIO_Init+0x2f4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d013      	beq.n	8000da2 <HAL_GPIO_Init+0x1fe>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a47      	ldr	r2, [pc, #284]	@ (8000e9c <HAL_GPIO_Init+0x2f8>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d00d      	beq.n	8000d9e <HAL_GPIO_Init+0x1fa>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a46      	ldr	r2, [pc, #280]	@ (8000ea0 <HAL_GPIO_Init+0x2fc>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d007      	beq.n	8000d9a <HAL_GPIO_Init+0x1f6>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a45      	ldr	r2, [pc, #276]	@ (8000ea4 <HAL_GPIO_Init+0x300>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d101      	bne.n	8000d96 <HAL_GPIO_Init+0x1f2>
 8000d92:	2304      	movs	r3, #4
 8000d94:	e008      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000d96:	2307      	movs	r3, #7
 8000d98:	e006      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e004      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e002      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000da6:	2300      	movs	r3, #0
 8000da8:	69fa      	ldr	r2, [r7, #28]
 8000daa:	f002 0203 	and.w	r2, r2, #3
 8000dae:	0092      	lsls	r2, r2, #2
 8000db0:	4093      	lsls	r3, r2
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db8:	4935      	ldr	r1, [pc, #212]	@ (8000e90 <HAL_GPIO_Init+0x2ec>)
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dc6:	4b38      	ldr	r3, [pc, #224]	@ (8000ea8 <HAL_GPIO_Init+0x304>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dea:	4a2f      	ldr	r2, [pc, #188]	@ (8000ea8 <HAL_GPIO_Init+0x304>)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df0:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea8 <HAL_GPIO_Init+0x304>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e14:	4a24      	ldr	r2, [pc, #144]	@ (8000ea8 <HAL_GPIO_Init+0x304>)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ea8 <HAL_GPIO_Init+0x304>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ea8 <HAL_GPIO_Init+0x304>)
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e44:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <HAL_GPIO_Init+0x304>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e68:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea8 <HAL_GPIO_Init+0x304>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3301      	adds	r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	2b0f      	cmp	r3, #15
 8000e78:	f67f aea2 	bls.w	8000bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3724      	adds	r7, #36	@ 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40013800 	.word	0x40013800
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	40020c00 	.word	0x40020c00
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40013c00 	.word	0x40013c00

08000eac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d101      	bne.n	8000ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e267      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d075      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000eca:	4b88      	ldr	r3, [pc, #544]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d00c      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ed6:	4b85      	ldr	r3, [pc, #532]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d112      	bne.n	8000f08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ee2:	4b82      	ldr	r3, [pc, #520]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000eee:	d10b      	bne.n	8000f08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef0:	4b7e      	ldr	r3, [pc, #504]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d05b      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x108>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d157      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e242      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f10:	d106      	bne.n	8000f20 <HAL_RCC_OscConfig+0x74>
 8000f12:	4b76      	ldr	r3, [pc, #472]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a75      	ldr	r2, [pc, #468]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e01d      	b.n	8000f5c <HAL_RCC_OscConfig+0xb0>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x98>
 8000f2a:	4b70      	ldr	r3, [pc, #448]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a6f      	ldr	r2, [pc, #444]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b6d      	ldr	r3, [pc, #436]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a6c      	ldr	r2, [pc, #432]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e00b      	b.n	8000f5c <HAL_RCC_OscConfig+0xb0>
 8000f44:	4b69      	ldr	r3, [pc, #420]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a68      	ldr	r2, [pc, #416]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b66      	ldr	r3, [pc, #408]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a65      	ldr	r2, [pc, #404]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d013      	beq.n	8000f8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f64:	f7ff fd08 	bl	8000978 <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fd04 	bl	8000978 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b64      	cmp	r3, #100	@ 0x64
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e207      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7e:	4b5b      	ldr	r3, [pc, #364]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0xc0>
 8000f8a:	e014      	b.n	8000fb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fcf4 	bl	8000978 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fcf0 	bl	8000978 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	@ 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e1f3      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa6:	4b51      	ldr	r3, [pc, #324]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f0      	bne.n	8000f94 <HAL_RCC_OscConfig+0xe8>
 8000fb2:	e000      	b.n	8000fb6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d063      	beq.n	800108a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fce:	4b47      	ldr	r3, [pc, #284]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d11c      	bne.n	8001014 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fda:	4b44      	ldr	r3, [pc, #272]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d116      	bne.n	8001014 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe6:	4b41      	ldr	r3, [pc, #260]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <HAL_RCC_OscConfig+0x152>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d001      	beq.n	8000ffe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e1c7      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4937      	ldr	r1, [pc, #220]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001012:	e03a      	b.n	800108a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d020      	beq.n	800105e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800101c:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <HAL_RCC_OscConfig+0x244>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001022:	f7ff fca9 	bl	8000978 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102a:	f7ff fca5 	bl	8000978 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e1a8      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103c:	4b2b      	ldr	r3, [pc, #172]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001048:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4925      	ldr	r1, [pc, #148]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8001058:	4313      	orrs	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
 800105c:	e015      	b.n	800108a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800105e:	4b24      	ldr	r3, [pc, #144]	@ (80010f0 <HAL_RCC_OscConfig+0x244>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001064:	f7ff fc88 	bl	8000978 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106c:	f7ff fc84 	bl	8000978 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e187      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	2b00      	cmp	r3, #0
 8001094:	d036      	beq.n	8001104 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d016      	beq.n	80010cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <HAL_RCC_OscConfig+0x248>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a4:	f7ff fc68 	bl	8000978 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ac:	f7ff fc64 	bl	8000978 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e167      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010be:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <HAL_RCC_OscConfig+0x240>)
 80010c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0x200>
 80010ca:	e01b      	b.n	8001104 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010cc:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <HAL_RCC_OscConfig+0x248>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d2:	f7ff fc51 	bl	8000978 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d8:	e00e      	b.n	80010f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010da:	f7ff fc4d 	bl	8000978 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d907      	bls.n	80010f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e150      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
 80010ec:	40023800 	.word	0x40023800
 80010f0:	42470000 	.word	0x42470000
 80010f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f8:	4b88      	ldr	r3, [pc, #544]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 80010fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1ea      	bne.n	80010da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 8097 	beq.w	8001240 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001116:	4b81      	ldr	r3, [pc, #516]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10f      	bne.n	8001142 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b7d      	ldr	r3, [pc, #500]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	4a7c      	ldr	r2, [pc, #496]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001130:	6413      	str	r3, [r2, #64]	@ 0x40
 8001132:	4b7a      	ldr	r3, [pc, #488]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800113e:	2301      	movs	r3, #1
 8001140:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001142:	4b77      	ldr	r3, [pc, #476]	@ (8001320 <HAL_RCC_OscConfig+0x474>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800114a:	2b00      	cmp	r3, #0
 800114c:	d118      	bne.n	8001180 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800114e:	4b74      	ldr	r3, [pc, #464]	@ (8001320 <HAL_RCC_OscConfig+0x474>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a73      	ldr	r2, [pc, #460]	@ (8001320 <HAL_RCC_OscConfig+0x474>)
 8001154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800115a:	f7ff fc0d 	bl	8000978 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001162:	f7ff fc09 	bl	8000978 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e10c      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001174:	4b6a      	ldr	r3, [pc, #424]	@ (8001320 <HAL_RCC_OscConfig+0x474>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d106      	bne.n	8001196 <HAL_RCC_OscConfig+0x2ea>
 8001188:	4b64      	ldr	r3, [pc, #400]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 800118a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800118c:	4a63      	ldr	r2, [pc, #396]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6713      	str	r3, [r2, #112]	@ 0x70
 8001194:	e01c      	b.n	80011d0 <HAL_RCC_OscConfig+0x324>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b05      	cmp	r3, #5
 800119c:	d10c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x30c>
 800119e:	4b5f      	ldr	r3, [pc, #380]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 80011a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011a2:	4a5e      	ldr	r2, [pc, #376]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80011aa:	4b5c      	ldr	r3, [pc, #368]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 80011ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011ae:	4a5b      	ldr	r2, [pc, #364]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80011b6:	e00b      	b.n	80011d0 <HAL_RCC_OscConfig+0x324>
 80011b8:	4b58      	ldr	r3, [pc, #352]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 80011ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011bc:	4a57      	ldr	r2, [pc, #348]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 80011be:	f023 0301 	bic.w	r3, r3, #1
 80011c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80011c4:	4b55      	ldr	r3, [pc, #340]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 80011c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011c8:	4a54      	ldr	r2, [pc, #336]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d015      	beq.n	8001204 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d8:	f7ff fbce 	bl	8000978 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011de:	e00a      	b.n	80011f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e0:	f7ff fbca 	bl	8000978 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e0cb      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f6:	4b49      	ldr	r3, [pc, #292]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 80011f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0ee      	beq.n	80011e0 <HAL_RCC_OscConfig+0x334>
 8001202:	e014      	b.n	800122e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001204:	f7ff fbb8 	bl	8000978 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800120a:	e00a      	b.n	8001222 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120c:	f7ff fbb4 	bl	8000978 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800121a:	4293      	cmp	r3, r2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e0b5      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001222:	4b3e      	ldr	r3, [pc, #248]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 8001224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1ee      	bne.n	800120c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d105      	bne.n	8001240 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001234:	4b39      	ldr	r3, [pc, #228]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	4a38      	ldr	r2, [pc, #224]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 800123a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800123e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80a1 	beq.w	800138c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800124a:	4b34      	ldr	r3, [pc, #208]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	2b08      	cmp	r3, #8
 8001254:	d05c      	beq.n	8001310 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d141      	bne.n	80012e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125e:	4b31      	ldr	r3, [pc, #196]	@ (8001324 <HAL_RCC_OscConfig+0x478>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fb88 	bl	8000978 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126c:	f7ff fb84 	bl	8000978 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e087      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800127e:	4b27      	ldr	r3, [pc, #156]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69da      	ldr	r2, [r3, #28]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001298:	019b      	lsls	r3, r3, #6
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a0:	085b      	lsrs	r3, r3, #1
 80012a2:	3b01      	subs	r3, #1
 80012a4:	041b      	lsls	r3, r3, #16
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ac:	061b      	lsls	r3, r3, #24
 80012ae:	491b      	ldr	r1, [pc, #108]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001324 <HAL_RCC_OscConfig+0x478>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ba:	f7ff fb5d 	bl	8000978 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c2:	f7ff fb59 	bl	8000978 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e05c      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x416>
 80012e0:	e054      	b.n	800138c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e2:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <HAL_RCC_OscConfig+0x478>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb46 	bl	8000978 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff fb42 	bl	8000978 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e045      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_RCC_OscConfig+0x470>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x444>
 800130e:	e03d      	b.n	800138c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d107      	bne.n	8001328 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e038      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000
 8001324:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001328:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <HAL_RCC_OscConfig+0x4ec>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d028      	beq.n	8001388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001340:	429a      	cmp	r2, r3
 8001342:	d121      	bne.n	8001388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800134e:	429a      	cmp	r2, r3
 8001350:	d11a      	bne.n	8001388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001358:	4013      	ands	r3, r2
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800135e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001360:	4293      	cmp	r3, r2
 8001362:	d111      	bne.n	8001388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136e:	085b      	lsrs	r3, r3, #1
 8001370:	3b01      	subs	r3, #1
 8001372:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001374:	429a      	cmp	r2, r3
 8001376:	d107      	bne.n	8001388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001382:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001384:	429a      	cmp	r2, r3
 8001386:	d001      	beq.n	800138c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0cc      	b.n	800154a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013b0:	4b68      	ldr	r3, [pc, #416]	@ (8001554 <HAL_RCC_ClockConfig+0x1b8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d90c      	bls.n	80013d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b65      	ldr	r3, [pc, #404]	@ (8001554 <HAL_RCC_ClockConfig+0x1b8>)
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c6:	4b63      	ldr	r3, [pc, #396]	@ (8001554 <HAL_RCC_ClockConfig+0x1b8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0b8      	b.n	800154a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d020      	beq.n	8001426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f0:	4b59      	ldr	r3, [pc, #356]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	4a58      	ldr	r2, [pc, #352]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001408:	4b53      	ldr	r3, [pc, #332]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	4a52      	ldr	r2, [pc, #328]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001414:	4b50      	ldr	r3, [pc, #320]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	494d      	ldr	r1, [pc, #308]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	4313      	orrs	r3, r2
 8001424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d044      	beq.n	80014bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d107      	bne.n	800144a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	4b47      	ldr	r3, [pc, #284]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d119      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e07f      	b.n	800154a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d003      	beq.n	800145a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001456:	2b03      	cmp	r3, #3
 8001458:	d107      	bne.n	800146a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145a:	4b3f      	ldr	r3, [pc, #252]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e06f      	b.n	800154a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146a:	4b3b      	ldr	r3, [pc, #236]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e067      	b.n	800154a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800147a:	4b37      	ldr	r3, [pc, #220]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f023 0203 	bic.w	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4934      	ldr	r1, [pc, #208]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	4313      	orrs	r3, r2
 800148a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800148c:	f7ff fa74 	bl	8000978 <HAL_GetTick>
 8001490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001492:	e00a      	b.n	80014aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001494:	f7ff fa70 	bl	8000978 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e04f      	b.n	800154a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 020c 	and.w	r2, r3, #12
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d1eb      	bne.n	8001494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014bc:	4b25      	ldr	r3, [pc, #148]	@ (8001554 <HAL_RCC_ClockConfig+0x1b8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d20c      	bcs.n	80014e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b22      	ldr	r3, [pc, #136]	@ (8001554 <HAL_RCC_ClockConfig+0x1b8>)
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d2:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <HAL_RCC_ClockConfig+0x1b8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d001      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e032      	b.n	800154a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d008      	beq.n	8001502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f0:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4916      	ldr	r1, [pc, #88]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b00      	cmp	r3, #0
 800150c:	d009      	beq.n	8001522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800150e:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	490e      	ldr	r1, [pc, #56]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	4313      	orrs	r3, r2
 8001520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001522:	f000 f821 	bl	8001568 <HAL_RCC_GetSysClockFreq>
 8001526:	4602      	mov	r2, r0
 8001528:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	490a      	ldr	r1, [pc, #40]	@ (800155c <HAL_RCC_ClockConfig+0x1c0>)
 8001534:	5ccb      	ldrb	r3, [r1, r3]
 8001536:	fa22 f303 	lsr.w	r3, r2, r3
 800153a:	4a09      	ldr	r2, [pc, #36]	@ (8001560 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <HAL_RCC_ClockConfig+0x1c8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f9d4 	bl	80008f0 <HAL_InitTick>

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023c00 	.word	0x40023c00
 8001558:	40023800 	.word	0x40023800
 800155c:	08002470 	.word	0x08002470
 8001560:	20000000 	.word	0x20000000
 8001564:	20000004 	.word	0x20000004

08001568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800156c:	b090      	sub	sp, #64	@ 0x40
 800156e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001580:	4b59      	ldr	r3, [pc, #356]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b08      	cmp	r3, #8
 800158a:	d00d      	beq.n	80015a8 <HAL_RCC_GetSysClockFreq+0x40>
 800158c:	2b08      	cmp	r3, #8
 800158e:	f200 80a1 	bhi.w	80016d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x34>
 8001596:	2b04      	cmp	r3, #4
 8001598:	d003      	beq.n	80015a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800159a:	e09b      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800159c:	4b53      	ldr	r3, [pc, #332]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x184>)
 800159e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015a0:	e09b      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015a2:	4b53      	ldr	r3, [pc, #332]	@ (80016f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80015a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015a6:	e098      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a8:	4b4f      	ldr	r3, [pc, #316]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015b2:	4b4d      	ldr	r3, [pc, #308]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d028      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015be:	4b4a      	ldr	r3, [pc, #296]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	099b      	lsrs	r3, r3, #6
 80015c4:	2200      	movs	r2, #0
 80015c6:	623b      	str	r3, [r7, #32]
 80015c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80015d0:	2100      	movs	r1, #0
 80015d2:	4b47      	ldr	r3, [pc, #284]	@ (80016f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80015d4:	fb03 f201 	mul.w	r2, r3, r1
 80015d8:	2300      	movs	r3, #0
 80015da:	fb00 f303 	mul.w	r3, r0, r3
 80015de:	4413      	add	r3, r2
 80015e0:	4a43      	ldr	r2, [pc, #268]	@ (80016f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80015e2:	fba0 1202 	umull	r1, r2, r0, r2
 80015e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015e8:	460a      	mov	r2, r1
 80015ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80015ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015ee:	4413      	add	r3, r2
 80015f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015f4:	2200      	movs	r2, #0
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	61fa      	str	r2, [r7, #28]
 80015fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001602:	f7fe fde7 	bl	80001d4 <__aeabi_uldivmod>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4613      	mov	r3, r2
 800160c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800160e:	e053      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001610:	4b35      	ldr	r3, [pc, #212]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	099b      	lsrs	r3, r3, #6
 8001616:	2200      	movs	r2, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	617a      	str	r2, [r7, #20]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001622:	f04f 0b00 	mov.w	fp, #0
 8001626:	4652      	mov	r2, sl
 8001628:	465b      	mov	r3, fp
 800162a:	f04f 0000 	mov.w	r0, #0
 800162e:	f04f 0100 	mov.w	r1, #0
 8001632:	0159      	lsls	r1, r3, #5
 8001634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001638:	0150      	lsls	r0, r2, #5
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	ebb2 080a 	subs.w	r8, r2, sl
 8001642:	eb63 090b 	sbc.w	r9, r3, fp
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001652:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001656:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800165a:	ebb2 0408 	subs.w	r4, r2, r8
 800165e:	eb63 0509 	sbc.w	r5, r3, r9
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	00eb      	lsls	r3, r5, #3
 800166c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001670:	00e2      	lsls	r2, r4, #3
 8001672:	4614      	mov	r4, r2
 8001674:	461d      	mov	r5, r3
 8001676:	eb14 030a 	adds.w	r3, r4, sl
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	eb45 030b 	adc.w	r3, r5, fp
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800168e:	4629      	mov	r1, r5
 8001690:	028b      	lsls	r3, r1, #10
 8001692:	4621      	mov	r1, r4
 8001694:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001698:	4621      	mov	r1, r4
 800169a:	028a      	lsls	r2, r1, #10
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016a2:	2200      	movs	r2, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	60fa      	str	r2, [r7, #12]
 80016a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016ac:	f7fe fd92 	bl	80001d4 <__aeabi_uldivmod>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4613      	mov	r3, r2
 80016b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	0c1b      	lsrs	r3, r3, #16
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	3301      	adds	r3, #1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80016c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016d2:	e002      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x184>)
 80016d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3740      	adds	r7, #64	@ 0x40
 80016e0:	46bd      	mov	sp, r7
 80016e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	00f42400 	.word	0x00f42400
 80016f0:	017d7840 	.word	0x017d7840

080016f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e041      	b.n	800178a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d106      	bne.n	8001720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff f83a 	bl	8000794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2202      	movs	r2, #2
 8001724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3304      	adds	r3, #4
 8001730:	4619      	mov	r1, r3
 8001732:	4610      	mov	r0, r2
 8001734:	f000 fb24 	bl	8001d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e041      	b.n	8001828 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d106      	bne.n	80017be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f839 	bl	8001830 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2202      	movs	r2, #2
 80017c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3304      	adds	r3, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f000 fad5 	bl	8001d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d109      	bne.n	8001868 <HAL_TIM_PWM_Start+0x24>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b01      	cmp	r3, #1
 800185e:	bf14      	ite	ne
 8001860:	2301      	movne	r3, #1
 8001862:	2300      	moveq	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	e022      	b.n	80018ae <HAL_TIM_PWM_Start+0x6a>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2b04      	cmp	r3, #4
 800186c:	d109      	bne.n	8001882 <HAL_TIM_PWM_Start+0x3e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b01      	cmp	r3, #1
 8001878:	bf14      	ite	ne
 800187a:	2301      	movne	r3, #1
 800187c:	2300      	moveq	r3, #0
 800187e:	b2db      	uxtb	r3, r3
 8001880:	e015      	b.n	80018ae <HAL_TIM_PWM_Start+0x6a>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2b08      	cmp	r3, #8
 8001886:	d109      	bne.n	800189c <HAL_TIM_PWM_Start+0x58>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b01      	cmp	r3, #1
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	e008      	b.n	80018ae <HAL_TIM_PWM_Start+0x6a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	bf14      	ite	ne
 80018a8:	2301      	movne	r3, #1
 80018aa:	2300      	moveq	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e068      	b.n	8001988 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d104      	bne.n	80018c6 <HAL_TIM_PWM_Start+0x82>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2202      	movs	r2, #2
 80018c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018c4:	e013      	b.n	80018ee <HAL_TIM_PWM_Start+0xaa>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d104      	bne.n	80018d6 <HAL_TIM_PWM_Start+0x92>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018d4:	e00b      	b.n	80018ee <HAL_TIM_PWM_Start+0xaa>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d104      	bne.n	80018e6 <HAL_TIM_PWM_Start+0xa2>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2202      	movs	r2, #2
 80018e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018e4:	e003      	b.n	80018ee <HAL_TIM_PWM_Start+0xaa>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2202      	movs	r2, #2
 80018ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2201      	movs	r2, #1
 80018f4:	6839      	ldr	r1, [r7, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fcee 	bl	80022d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a23      	ldr	r2, [pc, #140]	@ (8001990 <HAL_TIM_PWM_Start+0x14c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d107      	bne.n	8001916 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001914:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a1d      	ldr	r2, [pc, #116]	@ (8001990 <HAL_TIM_PWM_Start+0x14c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d018      	beq.n	8001952 <HAL_TIM_PWM_Start+0x10e>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001928:	d013      	beq.n	8001952 <HAL_TIM_PWM_Start+0x10e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a19      	ldr	r2, [pc, #100]	@ (8001994 <HAL_TIM_PWM_Start+0x150>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d00e      	beq.n	8001952 <HAL_TIM_PWM_Start+0x10e>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a17      	ldr	r2, [pc, #92]	@ (8001998 <HAL_TIM_PWM_Start+0x154>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d009      	beq.n	8001952 <HAL_TIM_PWM_Start+0x10e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a16      	ldr	r2, [pc, #88]	@ (800199c <HAL_TIM_PWM_Start+0x158>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d004      	beq.n	8001952 <HAL_TIM_PWM_Start+0x10e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a14      	ldr	r2, [pc, #80]	@ (80019a0 <HAL_TIM_PWM_Start+0x15c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d111      	bne.n	8001976 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b06      	cmp	r3, #6
 8001962:	d010      	beq.n	8001986 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001974:	e007      	b.n	8001986 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0201 	orr.w	r2, r2, #1
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40010000 	.word	0x40010000
 8001994:	40000400 	.word	0x40000400
 8001998:	40000800 	.word	0x40000800
 800199c:	40000c00 	.word	0x40000c00
 80019a0:	40014000 	.word	0x40014000

080019a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2200      	movs	r2, #0
 80019b4:	6839      	ldr	r1, [r7, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fc8e 	bl	80022d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a29      	ldr	r2, [pc, #164]	@ (8001a68 <HAL_TIM_PWM_Stop+0xc4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d117      	bne.n	80019f6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6a1a      	ldr	r2, [r3, #32]
 80019cc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10f      	bne.n	80019f6 <HAL_TIM_PWM_Stop+0x52>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6a1a      	ldr	r2, [r3, #32]
 80019dc:	f240 4344 	movw	r3, #1092	@ 0x444
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d107      	bne.n	80019f6 <HAL_TIM_PWM_Stop+0x52>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6a1a      	ldr	r2, [r3, #32]
 80019fc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10f      	bne.n	8001a26 <HAL_TIM_PWM_Stop+0x82>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6a1a      	ldr	r2, [r3, #32]
 8001a0c:	f240 4344 	movw	r3, #1092	@ 0x444
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d107      	bne.n	8001a26 <HAL_TIM_PWM_Stop+0x82>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d104      	bne.n	8001a36 <HAL_TIM_PWM_Stop+0x92>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a34:	e013      	b.n	8001a5e <HAL_TIM_PWM_Stop+0xba>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d104      	bne.n	8001a46 <HAL_TIM_PWM_Stop+0xa2>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a44:	e00b      	b.n	8001a5e <HAL_TIM_PWM_Stop+0xba>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d104      	bne.n	8001a56 <HAL_TIM_PWM_Stop+0xb2>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a54:	e003      	b.n	8001a5e <HAL_TIM_PWM_Stop+0xba>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40010000 	.word	0x40010000

08001a6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e0ae      	b.n	8001be8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	f200 809f 	bhi.w	8001bd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001ad5 	.word	0x08001ad5
 8001aa4:	08001bd9 	.word	0x08001bd9
 8001aa8:	08001bd9 	.word	0x08001bd9
 8001aac:	08001bd9 	.word	0x08001bd9
 8001ab0:	08001b15 	.word	0x08001b15
 8001ab4:	08001bd9 	.word	0x08001bd9
 8001ab8:	08001bd9 	.word	0x08001bd9
 8001abc:	08001bd9 	.word	0x08001bd9
 8001ac0:	08001b57 	.word	0x08001b57
 8001ac4:	08001bd9 	.word	0x08001bd9
 8001ac8:	08001bd9 	.word	0x08001bd9
 8001acc:	08001bd9 	.word	0x08001bd9
 8001ad0:	08001b97 	.word	0x08001b97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f9d6 	bl	8001e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0208 	orr.w	r2, r2, #8
 8001aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0204 	bic.w	r2, r2, #4
 8001afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6999      	ldr	r1, [r3, #24]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	619a      	str	r2, [r3, #24]
      break;
 8001b12:	e064      	b.n	8001bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fa1c 	bl	8001f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	699a      	ldr	r2, [r3, #24]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6999      	ldr	r1, [r3, #24]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	021a      	lsls	r2, r3, #8
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	619a      	str	r2, [r3, #24]
      break;
 8001b54:	e043      	b.n	8001bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fa67 	bl	8002030 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0208 	orr.w	r2, r2, #8
 8001b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0204 	bic.w	r2, r2, #4
 8001b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69d9      	ldr	r1, [r3, #28]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	61da      	str	r2, [r3, #28]
      break;
 8001b94:	e023      	b.n	8001bde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 fab1 	bl	8002104 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69da      	ldr	r2, [r3, #28]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69da      	ldr	r2, [r3, #28]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69d9      	ldr	r1, [r3, #28]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	021a      	lsls	r2, r3, #8
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	61da      	str	r2, [r3, #28]
      break;
 8001bd6:	e002      	b.n	8001bde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	75fb      	strb	r3, [r7, #23]
      break;
 8001bdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_TIM_ConfigClockSource+0x1c>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e0b4      	b.n	8001d76 <HAL_TIM_ConfigClockSource+0x186>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001c32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c44:	d03e      	beq.n	8001cc4 <HAL_TIM_ConfigClockSource+0xd4>
 8001c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c4a:	f200 8087 	bhi.w	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c52:	f000 8086 	beq.w	8001d62 <HAL_TIM_ConfigClockSource+0x172>
 8001c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c5a:	d87f      	bhi.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c5c:	2b70      	cmp	r3, #112	@ 0x70
 8001c5e:	d01a      	beq.n	8001c96 <HAL_TIM_ConfigClockSource+0xa6>
 8001c60:	2b70      	cmp	r3, #112	@ 0x70
 8001c62:	d87b      	bhi.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c64:	2b60      	cmp	r3, #96	@ 0x60
 8001c66:	d050      	beq.n	8001d0a <HAL_TIM_ConfigClockSource+0x11a>
 8001c68:	2b60      	cmp	r3, #96	@ 0x60
 8001c6a:	d877      	bhi.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c6c:	2b50      	cmp	r3, #80	@ 0x50
 8001c6e:	d03c      	beq.n	8001cea <HAL_TIM_ConfigClockSource+0xfa>
 8001c70:	2b50      	cmp	r3, #80	@ 0x50
 8001c72:	d873      	bhi.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c74:	2b40      	cmp	r3, #64	@ 0x40
 8001c76:	d058      	beq.n	8001d2a <HAL_TIM_ConfigClockSource+0x13a>
 8001c78:	2b40      	cmp	r3, #64	@ 0x40
 8001c7a:	d86f      	bhi.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c7c:	2b30      	cmp	r3, #48	@ 0x30
 8001c7e:	d064      	beq.n	8001d4a <HAL_TIM_ConfigClockSource+0x15a>
 8001c80:	2b30      	cmp	r3, #48	@ 0x30
 8001c82:	d86b      	bhi.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	d060      	beq.n	8001d4a <HAL_TIM_ConfigClockSource+0x15a>
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d867      	bhi.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d05c      	beq.n	8001d4a <HAL_TIM_ConfigClockSource+0x15a>
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	d05a      	beq.n	8001d4a <HAL_TIM_ConfigClockSource+0x15a>
 8001c94:	e062      	b.n	8001d5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ca6:	f000 faf7 	bl	8002298 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001cb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	609a      	str	r2, [r3, #8]
      break;
 8001cc2:	e04f      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cd4:	f000 fae0 	bl	8002298 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ce6:	609a      	str	r2, [r3, #8]
      break;
 8001ce8:	e03c      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f000 fa54 	bl	80021a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2150      	movs	r1, #80	@ 0x50
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 faad 	bl	8002262 <TIM_ITRx_SetConfig>
      break;
 8001d08:	e02c      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d16:	461a      	mov	r2, r3
 8001d18:	f000 fa73 	bl	8002202 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2160      	movs	r1, #96	@ 0x60
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fa9d 	bl	8002262 <TIM_ITRx_SetConfig>
      break;
 8001d28:	e01c      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d36:	461a      	mov	r2, r3
 8001d38:	f000 fa34 	bl	80021a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2140      	movs	r1, #64	@ 0x40
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 fa8d 	bl	8002262 <TIM_ITRx_SetConfig>
      break;
 8001d48:	e00c      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4619      	mov	r1, r3
 8001d54:	4610      	mov	r0, r2
 8001d56:	f000 fa84 	bl	8002262 <TIM_ITRx_SetConfig>
      break;
 8001d5a:	e003      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d60:	e000      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a37      	ldr	r2, [pc, #220]	@ (8001e70 <TIM_Base_SetConfig+0xf0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d00f      	beq.n	8001db8 <TIM_Base_SetConfig+0x38>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d9e:	d00b      	beq.n	8001db8 <TIM_Base_SetConfig+0x38>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a34      	ldr	r2, [pc, #208]	@ (8001e74 <TIM_Base_SetConfig+0xf4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d007      	beq.n	8001db8 <TIM_Base_SetConfig+0x38>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a33      	ldr	r2, [pc, #204]	@ (8001e78 <TIM_Base_SetConfig+0xf8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d003      	beq.n	8001db8 <TIM_Base_SetConfig+0x38>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a32      	ldr	r2, [pc, #200]	@ (8001e7c <TIM_Base_SetConfig+0xfc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d108      	bne.n	8001dca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a28      	ldr	r2, [pc, #160]	@ (8001e70 <TIM_Base_SetConfig+0xf0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d01b      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd8:	d017      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a25      	ldr	r2, [pc, #148]	@ (8001e74 <TIM_Base_SetConfig+0xf4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a24      	ldr	r2, [pc, #144]	@ (8001e78 <TIM_Base_SetConfig+0xf8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00f      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a23      	ldr	r2, [pc, #140]	@ (8001e7c <TIM_Base_SetConfig+0xfc>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00b      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a22      	ldr	r2, [pc, #136]	@ (8001e80 <TIM_Base_SetConfig+0x100>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a21      	ldr	r2, [pc, #132]	@ (8001e84 <TIM_Base_SetConfig+0x104>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d003      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a20      	ldr	r2, [pc, #128]	@ (8001e88 <TIM_Base_SetConfig+0x108>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d108      	bne.n	8001e1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e70 <TIM_Base_SetConfig+0xf0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d103      	bne.n	8001e4a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f043 0204 	orr.w	r2, r3, #4
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	601a      	str	r2, [r3, #0]
}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40010000 	.word	0x40010000
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40000800 	.word	0x40000800
 8001e7c:	40000c00 	.word	0x40000c00
 8001e80:	40014000 	.word	0x40014000
 8001e84:	40014400 	.word	0x40014400
 8001e88:	40014800 	.word	0x40014800

08001e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f023 0201 	bic.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f023 0302 	bic.w	r3, r3, #2
 8001ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f54 <TIM_OC1_SetConfig+0xc8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d10c      	bne.n	8001f02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f023 0308 	bic.w	r3, r3, #8
 8001eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a13      	ldr	r2, [pc, #76]	@ (8001f54 <TIM_OC1_SetConfig+0xc8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d111      	bne.n	8001f2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	621a      	str	r2, [r3, #32]
}
 8001f48:	bf00      	nop
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40010000 	.word	0x40010000

08001f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f023 0210 	bic.w	r2, r3, #16
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f023 0320 	bic.w	r3, r3, #32
 8001fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800202c <TIM_OC2_SetConfig+0xd4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d10d      	bne.n	8001fd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001fd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a15      	ldr	r2, [pc, #84]	@ (800202c <TIM_OC2_SetConfig+0xd4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d113      	bne.n	8002004 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	621a      	str	r2, [r3, #32]
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40010000 	.word	0x40010000

08002030 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800205e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 0303 	bic.w	r3, r3, #3
 8002066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4313      	orrs	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1d      	ldr	r2, [pc, #116]	@ (8002100 <TIM_OC3_SetConfig+0xd0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10d      	bne.n	80020aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80020a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a14      	ldr	r2, [pc, #80]	@ (8002100 <TIM_OC3_SetConfig+0xd0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d113      	bne.n	80020da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80020c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	621a      	str	r2, [r3, #32]
}
 80020f4:	bf00      	nop
 80020f6:	371c      	adds	r7, #28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	40010000 	.word	0x40010000

08002104 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800213a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800214e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	031b      	lsls	r3, r3, #12
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a10      	ldr	r2, [pc, #64]	@ (80021a0 <TIM_OC4_SetConfig+0x9c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d109      	bne.n	8002178 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800216a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	621a      	str	r2, [r3, #32]
}
 8002192:	bf00      	nop
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40010000 	.word	0x40010000

080021a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	f023 0201 	bic.w	r2, r3, #1
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f023 030a 	bic.w	r3, r3, #10
 80021e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	621a      	str	r2, [r3, #32]
}
 80021f6:	bf00      	nop
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002202:	b480      	push	{r7}
 8002204:	b087      	sub	sp, #28
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f023 0210 	bic.w	r2, r3, #16
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800222c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	031b      	lsls	r3, r3, #12
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800223e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	621a      	str	r2, [r3, #32]
}
 8002256:	bf00      	nop
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	f043 0307 	orr.w	r3, r3, #7
 8002284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	609a      	str	r2, [r3, #8]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	021a      	lsls	r2, r3, #8
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4313      	orrs	r3, r2
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	609a      	str	r2, [r3, #8]
}
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	2201      	movs	r2, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a1a      	ldr	r2, [r3, #32]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	401a      	ands	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a1a      	ldr	r2, [r3, #32]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	431a      	orrs	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	621a      	str	r2, [r3, #32]
}
 8002316:	bf00      	nop
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002338:	2302      	movs	r3, #2
 800233a:	e050      	b.n	80023de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1c      	ldr	r2, [pc, #112]	@ (80023ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d018      	beq.n	80023b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002388:	d013      	beq.n	80023b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a18      	ldr	r2, [pc, #96]	@ (80023f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00e      	beq.n	80023b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a16      	ldr	r2, [pc, #88]	@ (80023f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d009      	beq.n	80023b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a15      	ldr	r2, [pc, #84]	@ (80023f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d004      	beq.n	80023b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a13      	ldr	r2, [pc, #76]	@ (80023fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10c      	bne.n	80023cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40000800 	.word	0x40000800
 80023f8:	40000c00 	.word	0x40000c00
 80023fc:	40014000 	.word	0x40014000

08002400 <memset>:
 8002400:	4402      	add	r2, r0
 8002402:	4603      	mov	r3, r0
 8002404:	4293      	cmp	r3, r2
 8002406:	d100      	bne.n	800240a <memset+0xa>
 8002408:	4770      	bx	lr
 800240a:	f803 1b01 	strb.w	r1, [r3], #1
 800240e:	e7f9      	b.n	8002404 <memset+0x4>

08002410 <__libc_init_array>:
 8002410:	b570      	push	{r4, r5, r6, lr}
 8002412:	4d0d      	ldr	r5, [pc, #52]	@ (8002448 <__libc_init_array+0x38>)
 8002414:	4c0d      	ldr	r4, [pc, #52]	@ (800244c <__libc_init_array+0x3c>)
 8002416:	1b64      	subs	r4, r4, r5
 8002418:	10a4      	asrs	r4, r4, #2
 800241a:	2600      	movs	r6, #0
 800241c:	42a6      	cmp	r6, r4
 800241e:	d109      	bne.n	8002434 <__libc_init_array+0x24>
 8002420:	4d0b      	ldr	r5, [pc, #44]	@ (8002450 <__libc_init_array+0x40>)
 8002422:	4c0c      	ldr	r4, [pc, #48]	@ (8002454 <__libc_init_array+0x44>)
 8002424:	f000 f818 	bl	8002458 <_init>
 8002428:	1b64      	subs	r4, r4, r5
 800242a:	10a4      	asrs	r4, r4, #2
 800242c:	2600      	movs	r6, #0
 800242e:	42a6      	cmp	r6, r4
 8002430:	d105      	bne.n	800243e <__libc_init_array+0x2e>
 8002432:	bd70      	pop	{r4, r5, r6, pc}
 8002434:	f855 3b04 	ldr.w	r3, [r5], #4
 8002438:	4798      	blx	r3
 800243a:	3601      	adds	r6, #1
 800243c:	e7ee      	b.n	800241c <__libc_init_array+0xc>
 800243e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002442:	4798      	blx	r3
 8002444:	3601      	adds	r6, #1
 8002446:	e7f2      	b.n	800242e <__libc_init_array+0x1e>
 8002448:	08002488 	.word	0x08002488
 800244c:	08002488 	.word	0x08002488
 8002450:	08002488 	.word	0x08002488
 8002454:	0800248c 	.word	0x0800248c

08002458 <_init>:
 8002458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245a:	bf00      	nop
 800245c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800245e:	bc08      	pop	{r3}
 8002460:	469e      	mov	lr, r3
 8002462:	4770      	bx	lr

08002464 <_fini>:
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	bf00      	nop
 8002468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246a:	bc08      	pop	{r3}
 800246c:	469e      	mov	lr, r3
 800246e:	4770      	bx	lr
