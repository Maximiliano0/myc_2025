
DeBounce.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cf0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001e84  08001e84  00011e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e94  08001e94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001e94  08001e94  00011e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e9c  08001e9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e9c  08001e9c  00011e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ea0  08001ea0  00011ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001eb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001eb0  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000084ea  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015f4  00000000  00000000  00028569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  00029b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074e  00000000  00000000  0002a4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015188  00000000  00000000  0002ac2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a5d7  00000000  00000000  0003fdb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008731d  00000000  00000000  0004a38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000273c  00000000  00000000  000d16ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000d3de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001e6c 	.word	0x08001e6c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001e6c 	.word	0x08001e6c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/* Global variables ----*/
extern uint8_t counter;

/* Main Function ----*/
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  // Hardware Initialize
  Hw_Init();
 80004d4:	f000 f818 	bl	8000508 <Hw_Init>

  // Infinite Loop
  while (1)
  {
	  if(SWICTH_Filtered(SWITCH_PORT, SWITCH_PIN)==SWITCH_ON) HAL_GPIO_WritePin(LED_PORT, LED_PIN, LED_ON);
 80004d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004dc:	4809      	ldr	r0, [pc, #36]	; (8000504 <main+0x34>)
 80004de:	f000 f921 	bl	8000724 <SWICTH_Filtered>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d106      	bne.n	80004f6 <main+0x26>
 80004e8:	2201      	movs	r2, #1
 80004ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <main+0x34>)
 80004f0:	f000 fd22 	bl	8000f38 <HAL_GPIO_WritePin>
 80004f4:	e7f0      	b.n	80004d8 <main+0x8>
	  else HAL_GPIO_WritePin(LED_PORT, LED_PIN, LED_OFF);
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fc:	4801      	ldr	r0, [pc, #4]	; (8000504 <main+0x34>)
 80004fe:	f000 fd1b 	bl	8000f38 <HAL_GPIO_WritePin>
	  if(SWICTH_Filtered(SWITCH_PORT, SWITCH_PIN)==SWITCH_ON) HAL_GPIO_WritePin(LED_PORT, LED_PIN, LED_ON);
 8000502:	e7e9      	b.n	80004d8 <main+0x8>
 8000504:	40020000 	.word	0x40020000

08000508 <Hw_Init>:
uint8_t counter = 0;

/* Public Function Definitions ------------*/

/* Hardware Configuration */
uint8_t Hw_Init(void){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0

	/* HAL Initialization	*/
	HAL_Init(); // --> Init Software
 800050c:	f000 f9f4 	bl	80008f8 <HAL_Init>

	/* CLK Configuration */
	SystemClock_Config(); // --> Init Hardware
 8000510:	f000 f808 	bl	8000524 <SystemClock_Config>

	/* GPIO Configuration */
	GPIO_Config(); // --> Init Hardware
 8000514:	f000 f85c 	bl	80005d0 <GPIO_Config>

	/* TIM2 Configuration */
	TIM2_Config(); // --> Init Hardware
 8000518:	f000 f8c4 	bl	80006a4 <TIM2_Config>


	return(1);
 800051c:	2301      	movs	r3, #1
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <SystemClock_Config>:


/* CLK Configuration */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f001 fc6e 	bl	8001e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <SystemClock_Config+0xa4>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <SystemClock_Config+0xa4>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <SystemClock_Config+0xa4>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <SystemClock_Config+0xa8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000570:	4a16      	ldr	r2, [pc, #88]	; (80005cc <SystemClock_Config+0xa8>)
 8000572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <SystemClock_Config+0xa8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000590:	2300      	movs	r3, #0
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fce7 	bl	8000f6c <HAL_RCC_OscConfig>

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 ff4f 	bl	800145c <HAL_RCC_ClockConfig>

  return;
 80005be:	bf00      	nop
}
 80005c0:	3750      	adds	r7, #80	; 0x50
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <GPIO_Config>:

/* GPIO Configuration */
void GPIO_Config(void){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08e      	sub	sp, #56	; 0x38
 80005d4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef LED_Pin_Conf = {0};
 80005d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef SWITCH_Pin_Conf = {0};
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

	/* GPIO Port Hardware Enable */
	// --> Hardware
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b28      	ldr	r3, [pc, #160]	; (800069c <GPIO_Config+0xcc>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a27      	ldr	r2, [pc, #156]	; (800069c <GPIO_Config+0xcc>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b25      	ldr	r3, [pc, #148]	; (800069c <GPIO_Config+0xcc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <GPIO_Config+0xcc>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a20      	ldr	r2, [pc, #128]	; (800069c <GPIO_Config+0xcc>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <GPIO_Config+0xcc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <GPIO_Config+0xcc>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a19      	ldr	r2, [pc, #100]	; (800069c <GPIO_Config+0xcc>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <GPIO_Config+0xcc>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

	/* LED Initial State : OFF */
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, LED_OFF);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000650:	4813      	ldr	r0, [pc, #76]	; (80006a0 <GPIO_Config+0xd0>)
 8000652:	f000 fc71 	bl	8000f38 <HAL_GPIO_WritePin>

	/* LED Pin Features Load */
	// --> Software
	LED_Pin_Conf.Pin = LED_PIN;
 8000656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
	LED_Pin_Conf.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
	LED_Pin_Conf.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
	LED_Pin_Conf.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	633b      	str	r3, [r7, #48]	; 0x30

	/* LED Pin Hardware Configuration */
	// --> Hardware
	HAL_GPIO_Init(LED_PORT, &LED_Pin_Conf);
 8000668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066c:	4619      	mov	r1, r3
 800066e:	480c      	ldr	r0, [pc, #48]	; (80006a0 <GPIO_Config+0xd0>)
 8000670:	f000 fac6 	bl	8000c00 <HAL_GPIO_Init>

	/* LED Pin Features Load */
	// --> Software
	SWITCH_Pin_Conf.Pin = SWITCH_PIN;
 8000674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000678:	613b      	str	r3, [r7, #16]
	SWITCH_Pin_Conf.Mode = GPIO_MODE_INPUT;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
	SWITCH_Pin_Conf.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
	SWITCH_Pin_Conf.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]

	/* LED Pin Hardware Configuration */
	// --> Hardware
	HAL_GPIO_Init(SWITCH_PORT, &SWITCH_Pin_Conf);
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <GPIO_Config+0xd0>)
 800068e:	f000 fab7 	bl	8000c00 <HAL_GPIO_Init>


	return;
 8000692:	bf00      	nop
}
 8000694:	3738      	adds	r7, #56	; 0x38
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40020000 	.word	0x40020000

080006a4 <TIM2_Config>:

/* TIM2 Configuration */
void TIM2_Config(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef CLK_Source = {0};
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]

	/*  TIM Features Load */
	// --> Software
	hledtim.Instance = LED_TIMER;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <TIM2_Config+0x7c>)
 80006c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006c6:	601a      	str	r2, [r3, #0]
	hledtim.Init.Prescaler = LED_PRESCALER-1;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <TIM2_Config+0x7c>)
 80006ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006ce:	605a      	str	r2, [r3, #4]
	hledtim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <TIM2_Config+0x7c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
	hledtim.Init.Period = _LedPeriod(1); // 1 [ms]
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <TIM2_Config+0x7c>)
 80006d8:	220f      	movs	r2, #15
 80006da:	60da      	str	r2, [r3, #12]
	hledtim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <TIM2_Config+0x7c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
	hledtim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <TIM2_Config+0x7c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
	/* TIM Hardware Configuration */
	// --> Hardware
	HAL_TIM_Base_Init(&hledtim);
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <TIM2_Config+0x7c>)
 80006ea:	f001 f863 	bl	80017b4 <HAL_TIM_Base_Init>

	/* CLK Source Selection */
	CLK_Source.ClockSource = TIM_CLOCKSOURCE_INTERNAL; // --> Software
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	60bb      	str	r3, [r7, #8]
	HAL_TIM_ConfigClockSource(&hledtim, &CLK_Source); // --> Hardware
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	4619      	mov	r1, r3
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <TIM2_Config+0x7c>)
 80006fc:	f001 f92e 	bl	800195c <HAL_TIM_ConfigClockSource>

	/* TIM OVF Interrupt Config */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE; // --> Software
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_MasterConfigSynchronization(&hledtim, &sMasterConfig); // --> Hardware
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <TIM2_Config+0x7c>)
 800070e:	f001 fb13 	bl	8001d38 <HAL_TIMEx_MasterConfigSynchronization>

	/* TIMER RUN (Interruption)	*/
	HAL_TIM_Base_Start_IT(&hledtim); // --> Hardware
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <TIM2_Config+0x7c>)
 8000714:	f001 f89e 	bl	8001854 <HAL_TIM_Base_Start_IT>

	return;
 8000718:	bf00      	nop
}
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000028 	.word	0x20000028

08000724 <SWICTH_Filtered>:

/* Filtered Read Pin */
GPIO_PinState SWICTH_Filtered(GPIO_TypeDef* GPIO_PORT, uint16_t GPIO_PIN){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]

	GPIO_PinState actual, previa;

	/* Read Pin */
	previa = HAL_GPIO_ReadPin(GPIO_PORT, GPIO_PIN);
 8000730:	887b      	ldrh	r3, [r7, #2]
 8000732:	4619      	mov	r1, r3
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f000 fbe7 	bl	8000f08 <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	73fb      	strb	r3, [r7, #15]
	// while(counter!=0);



	/* Read Pin Again */
	actual = HAL_GPIO_ReadPin(GPIO_PORT, GPIO_PIN);
 800073e:	887b      	ldrh	r3, [r7, #2]
 8000740:	4619      	mov	r1, r3
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f000 fbe0 	bl	8000f08 <HAL_GPIO_ReadPin>
 8000748:	4603      	mov	r3, r0
 800074a:	73bb      	strb	r3, [r7, #14]

	/* Compeare  */
	if(actual==previa) return(previa);
 800074c:	7bba      	ldrb	r2, [r7, #14]
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	429a      	cmp	r2, r3
 8000752:	d101      	bne.n	8000758 <SWICTH_Filtered+0x34>
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	e000      	b.n	800075a <SWICTH_Filtered+0x36>
	else return(actual);
 8000758:	7bbb      	ldrb	r3, [r7, #14]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <TIM2_IRQHandler>:


/* TIM2 IRQ Definition */
void TIM2_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

  /* TIM2 IT CATCH */
  HAL_TIM_IRQHandler(&hledtim); // --> Hardware
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <TIM2_IRQHandler+0x24>)
 800076a:	f001 f8d5 	bl	8001918 <HAL_TIM_IRQHandler>

  /* COUNT */
  if(counter!=0) counter--;
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <TIM2_IRQHandler+0x28>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d006      	beq.n	8000784 <TIM2_IRQHandler+0x20>
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <TIM2_IRQHandler+0x28>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	3b01      	subs	r3, #1
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b03      	ldr	r3, [pc, #12]	; (800078c <TIM2_IRQHandler+0x28>)
 8000780:	701a      	strb	r2, [r3, #0]

  return;
 8000782:	bf00      	nop
 8000784:	bf00      	nop
}
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000028 	.word	0x20000028
 800078c:	20000070 	.word	0x20000070

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <HAL_MspInit+0x4c>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a4:	6453      	str	r3, [r2, #68]	; 0x44
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_MspInit+0x4c>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6413      	str	r3, [r2, #64]	; 0x40
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007f0:	d115      	bne.n	800081e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_TIM_Base_MspInit+0x48>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <HAL_TIM_Base_MspInit+0x48>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_TIM_Base_MspInit+0x48>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	201c      	movs	r0, #28
 8000814:	f000 f9bd 	bl	8000b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000818:	201c      	movs	r0, #28
 800081a:	f000 f9d6 	bl	8000bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000830:	e7fe      	b.n	8000830 <NMI_Handler+0x4>

08000832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <MemManage_Handler+0x4>

0800083e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <UsageFault_Handler+0x4>

0800084a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  HAL_IncTick();
 8000878:	f000 f890 	bl	800099c <HAL_IncTick>

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <SystemInit+0x20>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <SystemInit+0x20>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008a8:	f7ff ffea 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ae:	490d      	ldr	r1, [pc, #52]	; (80008e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c4:	4c0a      	ldr	r4, [pc, #40]	; (80008f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80008d2:	f001 faa7 	bl	8001e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fdfb 	bl	80004d0 <main>
  bx  lr    
 80008da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e8:	08001ea4 	.word	0x08001ea4
  ldr r2, =_sbss
 80008ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008f0:	20000078 	.word	0x20000078

080008f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <HAL_Init+0x40>)
 8000902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <HAL_Init+0x40>)
 800090e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <HAL_Init+0x40>)
 800091a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800091e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f92b 	bl	8000b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	200f      	movs	r0, #15
 8000928:	f000 f808 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff ff30 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023c00 	.word	0x40023c00

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_InitTick+0x54>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0x58>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f943 	bl	8000be6 <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e00e      	b.n	8000988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d80a      	bhi.n	8000986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f000 f90b 	bl	8000b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <HAL_InitTick+0x5c>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000000 	.word	0x20000000
 8000994:	20000008 	.word	0x20000008
 8000998:	20000004 	.word	0x20000004

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000008 	.word	0x20000008
 80009c0:	20000074 	.word	0x20000074

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000074 	.word	0x20000074

080009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	db0b      	blt.n	8000a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f003 021f 	and.w	r2, r3, #31
 8000a58:	4907      	ldr	r1, [pc, #28]	; (8000a78 <__NVIC_EnableIRQ+0x38>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	095b      	lsrs	r3, r3, #5
 8000a60:	2001      	movs	r0, #1
 8000a62:	fa00 f202 	lsl.w	r2, r0, r2
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	; (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b48:	d301      	bcc.n	8000b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00f      	b.n	8000b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <SysTick_Config+0x40>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b56:	210f      	movs	r1, #15
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f7ff ff8e 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <SysTick_Config+0x40>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SysTick_Config+0x40>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff29 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba4:	f7ff ff3e 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	6978      	ldr	r0, [r7, #20]
 8000bb0:	f7ff ff8e 	bl	8000ad0 <NVIC_EncodePriority>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff5d 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff31 	bl	8000a40 <__NVIC_EnableIRQ>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffa2 	bl	8000b38 <SysTick_Config>
 8000bf4:	4603      	mov	r3, r0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	e159      	b.n	8000ed0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f040 8148 	bne.w	8000eca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d005      	beq.n	8000c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d130      	bne.n	8000cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4013      	ands	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	68da      	ldr	r2, [r3, #12]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c88:	2201      	movs	r2, #1
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	091b      	lsrs	r3, r3, #4
 8000c9e:	f003 0201 	and.w	r2, r3, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d017      	beq.n	8000cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d123      	bne.n	8000d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	08da      	lsrs	r2, r3, #3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3208      	adds	r2, #8
 8000d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	f003 0307 	and.w	r3, r3, #7
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	220f      	movs	r2, #15
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	691a      	ldr	r2, [r3, #16]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	08da      	lsrs	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	69b9      	ldr	r1, [r7, #24]
 8000d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0203 	and.w	r2, r3, #3
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f000 80a2 	beq.w	8000eca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b57      	ldr	r3, [pc, #348]	; (8000ee8 <HAL_GPIO_Init+0x2e8>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a56      	ldr	r2, [pc, #344]	; (8000ee8 <HAL_GPIO_Init+0x2e8>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b54      	ldr	r3, [pc, #336]	; (8000ee8 <HAL_GPIO_Init+0x2e8>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000da2:	4a52      	ldr	r2, [pc, #328]	; (8000eec <HAL_GPIO_Init+0x2ec>)
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3302      	adds	r3, #2
 8000daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	220f      	movs	r2, #15
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a49      	ldr	r2, [pc, #292]	; (8000ef0 <HAL_GPIO_Init+0x2f0>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d019      	beq.n	8000e02 <HAL_GPIO_Init+0x202>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a48      	ldr	r2, [pc, #288]	; (8000ef4 <HAL_GPIO_Init+0x2f4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0x1fe>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a47      	ldr	r2, [pc, #284]	; (8000ef8 <HAL_GPIO_Init+0x2f8>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00d      	beq.n	8000dfa <HAL_GPIO_Init+0x1fa>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a46      	ldr	r2, [pc, #280]	; (8000efc <HAL_GPIO_Init+0x2fc>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d007      	beq.n	8000df6 <HAL_GPIO_Init+0x1f6>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a45      	ldr	r2, [pc, #276]	; (8000f00 <HAL_GPIO_Init+0x300>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_GPIO_Init+0x1f2>
 8000dee:	2304      	movs	r3, #4
 8000df0:	e008      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000df2:	2307      	movs	r3, #7
 8000df4:	e006      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000df6:	2303      	movs	r3, #3
 8000df8:	e004      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000e02:	2300      	movs	r3, #0
 8000e04:	69fa      	ldr	r2, [r7, #28]
 8000e06:	f002 0203 	and.w	r2, r2, #3
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	4093      	lsls	r3, r2
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e14:	4935      	ldr	r1, [pc, #212]	; (8000eec <HAL_GPIO_Init+0x2ec>)
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e22:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e70:	4a24      	ldr	r2, [pc, #144]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e9a:	4a1a      	ldr	r2, [pc, #104]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	2b0f      	cmp	r3, #15
 8000ed4:	f67f aea2 	bls.w	8000c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40013800 	.word	0x40013800
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40013c00 	.word	0x40013c00

08000f08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f20:	2301      	movs	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	e001      	b.n	8000f2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
 8000f44:	4613      	mov	r3, r2
 8000f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f48:	787b      	ldrb	r3, [r7, #1]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f54:	e003      	b.n	8000f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	041a      	lsls	r2, r3, #16
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	619a      	str	r2, [r3, #24]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e267      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d075      	beq.n	8001076 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f8a:	4b88      	ldr	r3, [pc, #544]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 030c 	and.w	r3, r3, #12
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	d00c      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f96:	4b85      	ldr	r3, [pc, #532]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d112      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fa2:	4b82      	ldr	r3, [pc, #520]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fae:	d10b      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb0:	4b7e      	ldr	r3, [pc, #504]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d05b      	beq.n	8001074 <HAL_RCC_OscConfig+0x108>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d157      	bne.n	8001074 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e242      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd0:	d106      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x74>
 8000fd2:	4b76      	ldr	r3, [pc, #472]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a75      	ldr	r2, [pc, #468]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8000fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e01d      	b.n	800101c <HAL_RCC_OscConfig+0xb0>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fe8:	d10c      	bne.n	8001004 <HAL_RCC_OscConfig+0x98>
 8000fea:	4b70      	ldr	r3, [pc, #448]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a6f      	ldr	r2, [pc, #444]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8000ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b6d      	ldr	r3, [pc, #436]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a6c      	ldr	r2, [pc, #432]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8000ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e00b      	b.n	800101c <HAL_RCC_OscConfig+0xb0>
 8001004:	4b69      	ldr	r3, [pc, #420]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a68      	ldr	r2, [pc, #416]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 800100a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b66      	ldr	r3, [pc, #408]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a65      	ldr	r2, [pc, #404]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8001016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d013      	beq.n	800104c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fcce 	bl	80009c4 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800102c:	f7ff fcca 	bl	80009c4 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b64      	cmp	r3, #100	; 0x64
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e207      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103e:	4b5b      	ldr	r3, [pc, #364]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f0      	beq.n	800102c <HAL_RCC_OscConfig+0xc0>
 800104a:	e014      	b.n	8001076 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fcba 	bl	80009c4 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fcb6 	bl	80009c4 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e1f3      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001066:	4b51      	ldr	r3, [pc, #324]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0xe8>
 8001072:	e000      	b.n	8001076 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d063      	beq.n	800114a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001082:	4b4a      	ldr	r3, [pc, #296]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00b      	beq.n	80010a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800108e:	4b47      	ldr	r3, [pc, #284]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001096:	2b08      	cmp	r3, #8
 8001098:	d11c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800109a:	4b44      	ldr	r3, [pc, #272]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d116      	bne.n	80010d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	4b41      	ldr	r3, [pc, #260]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d005      	beq.n	80010be <HAL_RCC_OscConfig+0x152>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d001      	beq.n	80010be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e1c7      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010be:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4937      	ldr	r1, [pc, #220]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d2:	e03a      	b.n	800114a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d020      	beq.n	800111e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010dc:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e2:	f7ff fc6f 	bl	80009c4 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ea:	f7ff fc6b 	bl	80009c4 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e1a8      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001108:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	4925      	ldr	r1, [pc, #148]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8001118:	4313      	orrs	r3, r2
 800111a:	600b      	str	r3, [r1, #0]
 800111c:	e015      	b.n	800114a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800111e:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <HAL_RCC_OscConfig+0x244>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fc4e 	bl	80009c4 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112c:	f7ff fc4a 	bl	80009c4 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e187      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	d036      	beq.n	80011c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d016      	beq.n	800118c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_RCC_OscConfig+0x248>)
 8001160:	2201      	movs	r2, #1
 8001162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001164:	f7ff fc2e 	bl	80009c4 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116c:	f7ff fc2a 	bl	80009c4 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e167      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_RCC_OscConfig+0x240>)
 8001180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0x200>
 800118a:	e01b      	b.n	80011c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_RCC_OscConfig+0x248>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001192:	f7ff fc17 	bl	80009c4 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001198:	e00e      	b.n	80011b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119a:	f7ff fc13 	bl	80009c4 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d907      	bls.n	80011b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e150      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
 80011ac:	40023800 	.word	0x40023800
 80011b0:	42470000 	.word	0x42470000
 80011b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b8:	4b88      	ldr	r3, [pc, #544]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 80011ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1ea      	bne.n	800119a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 8097 	beq.w	8001300 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d6:	4b81      	ldr	r3, [pc, #516]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10f      	bne.n	8001202 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b7d      	ldr	r3, [pc, #500]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a7c      	ldr	r2, [pc, #496]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b7a      	ldr	r3, [pc, #488]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011fe:	2301      	movs	r3, #1
 8001200:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001202:	4b77      	ldr	r3, [pc, #476]	; (80013e0 <HAL_RCC_OscConfig+0x474>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120a:	2b00      	cmp	r3, #0
 800120c:	d118      	bne.n	8001240 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800120e:	4b74      	ldr	r3, [pc, #464]	; (80013e0 <HAL_RCC_OscConfig+0x474>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a73      	ldr	r2, [pc, #460]	; (80013e0 <HAL_RCC_OscConfig+0x474>)
 8001214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800121a:	f7ff fbd3 	bl	80009c4 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001222:	f7ff fbcf 	bl	80009c4 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e10c      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001234:	4b6a      	ldr	r3, [pc, #424]	; (80013e0 <HAL_RCC_OscConfig+0x474>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d106      	bne.n	8001256 <HAL_RCC_OscConfig+0x2ea>
 8001248:	4b64      	ldr	r3, [pc, #400]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 800124a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124c:	4a63      	ldr	r2, [pc, #396]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6713      	str	r3, [r2, #112]	; 0x70
 8001254:	e01c      	b.n	8001290 <HAL_RCC_OscConfig+0x324>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2b05      	cmp	r3, #5
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x30c>
 800125e:	4b5f      	ldr	r3, [pc, #380]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 8001260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001262:	4a5e      	ldr	r2, [pc, #376]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6713      	str	r3, [r2, #112]	; 0x70
 800126a:	4b5c      	ldr	r3, [pc, #368]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 800126c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126e:	4a5b      	ldr	r2, [pc, #364]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6713      	str	r3, [r2, #112]	; 0x70
 8001276:	e00b      	b.n	8001290 <HAL_RCC_OscConfig+0x324>
 8001278:	4b58      	ldr	r3, [pc, #352]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 800127a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127c:	4a57      	ldr	r2, [pc, #348]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 800127e:	f023 0301 	bic.w	r3, r3, #1
 8001282:	6713      	str	r3, [r2, #112]	; 0x70
 8001284:	4b55      	ldr	r3, [pc, #340]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 8001286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001288:	4a54      	ldr	r2, [pc, #336]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 800128a:	f023 0304 	bic.w	r3, r3, #4
 800128e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d015      	beq.n	80012c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001298:	f7ff fb94 	bl	80009c4 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129e:	e00a      	b.n	80012b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a0:	f7ff fb90 	bl	80009c4 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e0cb      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b6:	4b49      	ldr	r3, [pc, #292]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 80012b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0ee      	beq.n	80012a0 <HAL_RCC_OscConfig+0x334>
 80012c2:	e014      	b.n	80012ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c4:	f7ff fb7e 	bl	80009c4 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012cc:	f7ff fb7a 	bl	80009c4 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e0b5      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e2:	4b3e      	ldr	r3, [pc, #248]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 80012e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1ee      	bne.n	80012cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d105      	bne.n	8001300 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f4:	4b39      	ldr	r3, [pc, #228]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a38      	ldr	r2, [pc, #224]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 80012fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80a1 	beq.w	800144c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800130a:	4b34      	ldr	r3, [pc, #208]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b08      	cmp	r3, #8
 8001314:	d05c      	beq.n	80013d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d141      	bne.n	80013a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131e:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <HAL_RCC_OscConfig+0x478>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fb4e 	bl	80009c4 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132c:	f7ff fb4a 	bl	80009c4 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e087      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133e:	4b27      	ldr	r3, [pc, #156]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69da      	ldr	r2, [r3, #28]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	019b      	lsls	r3, r3, #6
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001360:	085b      	lsrs	r3, r3, #1
 8001362:	3b01      	subs	r3, #1
 8001364:	041b      	lsls	r3, r3, #16
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136c:	061b      	lsls	r3, r3, #24
 800136e:	491b      	ldr	r1, [pc, #108]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <HAL_RCC_OscConfig+0x478>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7ff fb23 	bl	80009c4 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001382:	f7ff fb1f 	bl	80009c4 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e05c      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x416>
 80013a0:	e054      	b.n	800144c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_RCC_OscConfig+0x478>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fb0c 	bl	80009c4 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b0:	f7ff fb08 	bl	80009c4 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e045      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_RCC_OscConfig+0x470>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x444>
 80013ce:	e03d      	b.n	800144c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d107      	bne.n	80013e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e038      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40007000 	.word	0x40007000
 80013e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_RCC_OscConfig+0x4ec>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d028      	beq.n	8001448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001400:	429a      	cmp	r2, r3
 8001402:	d121      	bne.n	8001448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140e:	429a      	cmp	r2, r3
 8001410:	d11a      	bne.n	8001448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001418:	4013      	ands	r3, r2
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800141e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001420:	4293      	cmp	r3, r2
 8001422:	d111      	bne.n	8001448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	3b01      	subs	r3, #1
 8001432:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001434:	429a      	cmp	r2, r3
 8001436:	d107      	bne.n	8001448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001444:	429a      	cmp	r2, r3
 8001446:	d001      	beq.n	800144c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0cc      	b.n	800160a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b68      	ldr	r3, [pc, #416]	; (8001614 <HAL_RCC_ClockConfig+0x1b8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d90c      	bls.n	8001498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b65      	ldr	r3, [pc, #404]	; (8001614 <HAL_RCC_ClockConfig+0x1b8>)
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001486:	4b63      	ldr	r3, [pc, #396]	; (8001614 <HAL_RCC_ClockConfig+0x1b8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d001      	beq.n	8001498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0b8      	b.n	800160a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d020      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b0:	4b59      	ldr	r3, [pc, #356]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4a58      	ldr	r2, [pc, #352]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c8:	4b53      	ldr	r3, [pc, #332]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4a52      	ldr	r2, [pc, #328]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d4:	4b50      	ldr	r3, [pc, #320]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	494d      	ldr	r1, [pc, #308]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d044      	beq.n	800157c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d107      	bne.n	800150a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b47      	ldr	r3, [pc, #284]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d119      	bne.n	800153a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e07f      	b.n	800160a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d003      	beq.n	800151a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001516:	2b03      	cmp	r3, #3
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151a:	4b3f      	ldr	r3, [pc, #252]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d109      	bne.n	800153a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e06f      	b.n	800160a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152a:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e067      	b.n	800160a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800153a:	4b37      	ldr	r3, [pc, #220]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f023 0203 	bic.w	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4934      	ldr	r1, [pc, #208]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	4313      	orrs	r3, r2
 800154a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800154c:	f7ff fa3a 	bl	80009c4 <HAL_GetTick>
 8001550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001552:	e00a      	b.n	800156a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001554:	f7ff fa36 	bl	80009c4 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e04f      	b.n	800160a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 020c 	and.w	r2, r3, #12
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	429a      	cmp	r2, r3
 800157a:	d1eb      	bne.n	8001554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <HAL_RCC_ClockConfig+0x1b8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d20c      	bcs.n	80015a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b22      	ldr	r3, [pc, #136]	; (8001614 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e032      	b.n	800160a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4916      	ldr	r1, [pc, #88]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	490e      	ldr	r1, [pc, #56]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015e2:	f000 f821 	bl	8001628 <HAL_RCC_GetSysClockFreq>
 80015e6:	4602      	mov	r2, r0
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	490a      	ldr	r1, [pc, #40]	; (800161c <HAL_RCC_ClockConfig+0x1c0>)
 80015f4:	5ccb      	ldrb	r3, [r1, r3]
 80015f6:	fa22 f303 	lsr.w	r3, r2, r3
 80015fa:	4a09      	ldr	r2, [pc, #36]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_ClockConfig+0x1c8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff f99a 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00
 8001618:	40023800 	.word	0x40023800
 800161c:	08001e84 	.word	0x08001e84
 8001620:	20000000 	.word	0x20000000
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800162c:	b090      	sub	sp, #64	; 0x40
 800162e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001640:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	2b08      	cmp	r3, #8
 800164a:	d00d      	beq.n	8001668 <HAL_RCC_GetSysClockFreq+0x40>
 800164c:	2b08      	cmp	r3, #8
 800164e:	f200 80a1 	bhi.w	8001794 <HAL_RCC_GetSysClockFreq+0x16c>
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x34>
 8001656:	2b04      	cmp	r3, #4
 8001658:	d003      	beq.n	8001662 <HAL_RCC_GetSysClockFreq+0x3a>
 800165a:	e09b      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_GetSysClockFreq+0x184>)
 800165e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001660:	e09b      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001662:	4b53      	ldr	r3, [pc, #332]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001664:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001666:	e098      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001668:	4b4f      	ldr	r3, [pc, #316]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001670:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001672:	4b4d      	ldr	r3, [pc, #308]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d028      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167e:	4b4a      	ldr	r3, [pc, #296]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	099b      	lsrs	r3, r3, #6
 8001684:	2200      	movs	r2, #0
 8001686:	623b      	str	r3, [r7, #32]
 8001688:	627a      	str	r2, [r7, #36]	; 0x24
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001690:	2100      	movs	r1, #0
 8001692:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001694:	fb03 f201 	mul.w	r2, r3, r1
 8001698:	2300      	movs	r3, #0
 800169a:	fb00 f303 	mul.w	r3, r0, r3
 800169e:	4413      	add	r3, r2
 80016a0:	4a43      	ldr	r2, [pc, #268]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80016a2:	fba0 1202 	umull	r1, r2, r0, r2
 80016a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016a8:	460a      	mov	r2, r1
 80016aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80016ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ae:	4413      	add	r3, r2
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b4:	2200      	movs	r2, #0
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	61fa      	str	r2, [r7, #28]
 80016ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016c2:	f7fe fd87 	bl	80001d4 <__aeabi_uldivmod>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4613      	mov	r3, r2
 80016cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016ce:	e053      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d0:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	2200      	movs	r2, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	617a      	str	r2, [r7, #20]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016e2:	f04f 0b00 	mov.w	fp, #0
 80016e6:	4652      	mov	r2, sl
 80016e8:	465b      	mov	r3, fp
 80016ea:	f04f 0000 	mov.w	r0, #0
 80016ee:	f04f 0100 	mov.w	r1, #0
 80016f2:	0159      	lsls	r1, r3, #5
 80016f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016f8:	0150      	lsls	r0, r2, #5
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	ebb2 080a 	subs.w	r8, r2, sl
 8001702:	eb63 090b 	sbc.w	r9, r3, fp
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001712:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001716:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800171a:	ebb2 0408 	subs.w	r4, r2, r8
 800171e:	eb63 0509 	sbc.w	r5, r3, r9
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	00eb      	lsls	r3, r5, #3
 800172c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001730:	00e2      	lsls	r2, r4, #3
 8001732:	4614      	mov	r4, r2
 8001734:	461d      	mov	r5, r3
 8001736:	eb14 030a 	adds.w	r3, r4, sl
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	eb45 030b 	adc.w	r3, r5, fp
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800174e:	4629      	mov	r1, r5
 8001750:	028b      	lsls	r3, r1, #10
 8001752:	4621      	mov	r1, r4
 8001754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001758:	4621      	mov	r1, r4
 800175a:	028a      	lsls	r2, r1, #10
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001762:	2200      	movs	r2, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	60fa      	str	r2, [r7, #12]
 8001768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800176c:	f7fe fd32 	bl	80001d4 <__aeabi_uldivmod>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4613      	mov	r3, r2
 8001776:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	0c1b      	lsrs	r3, r3, #16
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	3301      	adds	r3, #1
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800178a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001790:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001792:	e002      	b.n	800179a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_RCC_GetSysClockFreq+0x184>)
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800179a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800179c:	4618      	mov	r0, r3
 800179e:	3740      	adds	r7, #64	; 0x40
 80017a0:	46bd      	mov	sp, r7
 80017a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	00f42400 	.word	0x00f42400
 80017b0:	017d7840 	.word	0x017d7840

080017b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e041      	b.n	800184a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d106      	bne.n	80017e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff f800 	bl	80007e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2202      	movs	r2, #2
 80017e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3304      	adds	r3, #4
 80017f0:	4619      	mov	r1, r3
 80017f2:	4610      	mov	r0, r2
 80017f4:	f000 f97a 	bl	8001aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d001      	beq.n	800186c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e044      	b.n	80018f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2202      	movs	r2, #2
 8001870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1e      	ldr	r2, [pc, #120]	; (8001904 <HAL_TIM_Base_Start_IT+0xb0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d018      	beq.n	80018c0 <HAL_TIM_Base_Start_IT+0x6c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001896:	d013      	beq.n	80018c0 <HAL_TIM_Base_Start_IT+0x6c>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <HAL_TIM_Base_Start_IT+0xb4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00e      	beq.n	80018c0 <HAL_TIM_Base_Start_IT+0x6c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_TIM_Base_Start_IT+0xb8>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d009      	beq.n	80018c0 <HAL_TIM_Base_Start_IT+0x6c>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_TIM_Base_Start_IT+0xbc>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d004      	beq.n	80018c0 <HAL_TIM_Base_Start_IT+0x6c>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a16      	ldr	r2, [pc, #88]	; (8001914 <HAL_TIM_Base_Start_IT+0xc0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d111      	bne.n	80018e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d010      	beq.n	80018f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 0201 	orr.w	r2, r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e2:	e007      	b.n	80018f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40010000 	.word	0x40010000
 8001908:	40000400 	.word	0x40000400
 800190c:	40000800 	.word	0x40000800
 8001910:	40000c00 	.word	0x40000c00
 8001914:	40014000 	.word	0x40014000

08001918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	60bb      	str	r3, [r7, #8]

  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00a      	beq.n	8001950 <HAL_TIM_IRQHandler+0x38>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_TIM_IRQHandler+0x38>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f06f 0201 	mvn.w	r2, #1
 800194c:	611a      	str	r2, [r3, #16]
    }
  }

  return;
 800194e:	bf00      	nop
 8001950:	bf00      	nop
}
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_TIM_ConfigClockSource+0x1c>
 8001974:	2302      	movs	r3, #2
 8001976:	e0b4      	b.n	8001ae2 <HAL_TIM_ConfigClockSource+0x186>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800199e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b0:	d03e      	beq.n	8001a30 <HAL_TIM_ConfigClockSource+0xd4>
 80019b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b6:	f200 8087 	bhi.w	8001ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80019ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019be:	f000 8086 	beq.w	8001ace <HAL_TIM_ConfigClockSource+0x172>
 80019c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019c6:	d87f      	bhi.n	8001ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80019c8:	2b70      	cmp	r3, #112	; 0x70
 80019ca:	d01a      	beq.n	8001a02 <HAL_TIM_ConfigClockSource+0xa6>
 80019cc:	2b70      	cmp	r3, #112	; 0x70
 80019ce:	d87b      	bhi.n	8001ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80019d0:	2b60      	cmp	r3, #96	; 0x60
 80019d2:	d050      	beq.n	8001a76 <HAL_TIM_ConfigClockSource+0x11a>
 80019d4:	2b60      	cmp	r3, #96	; 0x60
 80019d6:	d877      	bhi.n	8001ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80019d8:	2b50      	cmp	r3, #80	; 0x50
 80019da:	d03c      	beq.n	8001a56 <HAL_TIM_ConfigClockSource+0xfa>
 80019dc:	2b50      	cmp	r3, #80	; 0x50
 80019de:	d873      	bhi.n	8001ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80019e0:	2b40      	cmp	r3, #64	; 0x40
 80019e2:	d058      	beq.n	8001a96 <HAL_TIM_ConfigClockSource+0x13a>
 80019e4:	2b40      	cmp	r3, #64	; 0x40
 80019e6:	d86f      	bhi.n	8001ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80019e8:	2b30      	cmp	r3, #48	; 0x30
 80019ea:	d064      	beq.n	8001ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80019ec:	2b30      	cmp	r3, #48	; 0x30
 80019ee:	d86b      	bhi.n	8001ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	d060      	beq.n	8001ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d867      	bhi.n	8001ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d05c      	beq.n	8001ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80019fc:	2b10      	cmp	r3, #16
 80019fe:	d05a      	beq.n	8001ab6 <HAL_TIM_ConfigClockSource+0x15a>
 8001a00:	e062      	b.n	8001ac8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a12:	f000 f971 	bl	8001cf8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	609a      	str	r2, [r3, #8]
      break;
 8001a2e:	e04f      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a40:	f000 f95a 	bl	8001cf8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a52:	609a      	str	r2, [r3, #8]
      break;
 8001a54:	e03c      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a62:	461a      	mov	r2, r3
 8001a64:	f000 f8ce 	bl	8001c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2150      	movs	r1, #80	; 0x50
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f927 	bl	8001cc2 <TIM_ITRx_SetConfig>
      break;
 8001a74:	e02c      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a82:	461a      	mov	r2, r3
 8001a84:	f000 f8ed 	bl	8001c62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2160      	movs	r1, #96	; 0x60
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f917 	bl	8001cc2 <TIM_ITRx_SetConfig>
      break;
 8001a94:	e01c      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f000 f8ae 	bl	8001c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2140      	movs	r1, #64	; 0x40
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f907 	bl	8001cc2 <TIM_ITRx_SetConfig>
      break;
 8001ab4:	e00c      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f000 f8fe 	bl	8001cc2 <TIM_ITRx_SetConfig>
      break;
 8001ac6:	e003      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
      break;
 8001acc:	e000      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ace:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a3a      	ldr	r2, [pc, #232]	; (8001be8 <TIM_Base_SetConfig+0xfc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00f      	beq.n	8001b24 <TIM_Base_SetConfig+0x38>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0a:	d00b      	beq.n	8001b24 <TIM_Base_SetConfig+0x38>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a37      	ldr	r2, [pc, #220]	; (8001bec <TIM_Base_SetConfig+0x100>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d007      	beq.n	8001b24 <TIM_Base_SetConfig+0x38>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a36      	ldr	r2, [pc, #216]	; (8001bf0 <TIM_Base_SetConfig+0x104>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d003      	beq.n	8001b24 <TIM_Base_SetConfig+0x38>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a35      	ldr	r2, [pc, #212]	; (8001bf4 <TIM_Base_SetConfig+0x108>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d108      	bne.n	8001b36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a2b      	ldr	r2, [pc, #172]	; (8001be8 <TIM_Base_SetConfig+0xfc>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d01b      	beq.n	8001b76 <TIM_Base_SetConfig+0x8a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b44:	d017      	beq.n	8001b76 <TIM_Base_SetConfig+0x8a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a28      	ldr	r2, [pc, #160]	; (8001bec <TIM_Base_SetConfig+0x100>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d013      	beq.n	8001b76 <TIM_Base_SetConfig+0x8a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <TIM_Base_SetConfig+0x104>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00f      	beq.n	8001b76 <TIM_Base_SetConfig+0x8a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <TIM_Base_SetConfig+0x108>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d00b      	beq.n	8001b76 <TIM_Base_SetConfig+0x8a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a25      	ldr	r2, [pc, #148]	; (8001bf8 <TIM_Base_SetConfig+0x10c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d007      	beq.n	8001b76 <TIM_Base_SetConfig+0x8a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a24      	ldr	r2, [pc, #144]	; (8001bfc <TIM_Base_SetConfig+0x110>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d003      	beq.n	8001b76 <TIM_Base_SetConfig+0x8a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a23      	ldr	r2, [pc, #140]	; (8001c00 <TIM_Base_SetConfig+0x114>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d108      	bne.n	8001b88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <TIM_Base_SetConfig+0xfc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d103      	bne.n	8001bbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d105      	bne.n	8001bda <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f023 0201 	bic.w	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]
  }
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40010000 	.word	0x40010000
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	40000800 	.word	0x40000800
 8001bf4:	40000c00 	.word	0x40000c00
 8001bf8:	40014000 	.word	0x40014000
 8001bfc:	40014400 	.word	0x40014400
 8001c00:	40014800 	.word	0x40014800

08001c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	f023 0201 	bic.w	r2, r3, #1
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f023 030a 	bic.w	r3, r3, #10
 8001c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	621a      	str	r2, [r3, #32]
}
 8001c56:	bf00      	nop
 8001c58:	371c      	adds	r7, #28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b087      	sub	sp, #28
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f023 0210 	bic.w	r2, r3, #16
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	031b      	lsls	r3, r3, #12
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	621a      	str	r2, [r3, #32]
}
 8001cb6:	bf00      	nop
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f043 0307 	orr.w	r3, r3, #7
 8001ce4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	609a      	str	r2, [r3, #8]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	021a      	lsls	r2, r3, #8
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	609a      	str	r2, [r3, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e050      	b.n	8001df2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d018      	beq.n	8001dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9c:	d013      	beq.n	8001dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a18      	ldr	r2, [pc, #96]	; (8001e04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00e      	beq.n	8001dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d009      	beq.n	8001dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d004      	beq.n	8001dc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10c      	bne.n	8001de0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40010000 	.word	0x40010000
 8001e04:	40000400 	.word	0x40000400
 8001e08:	40000800 	.word	0x40000800
 8001e0c:	40000c00 	.word	0x40000c00
 8001e10:	40014000 	.word	0x40014000

08001e14 <memset>:
 8001e14:	4402      	add	r2, r0
 8001e16:	4603      	mov	r3, r0
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d100      	bne.n	8001e1e <memset+0xa>
 8001e1c:	4770      	bx	lr
 8001e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e22:	e7f9      	b.n	8001e18 <memset+0x4>

08001e24 <__libc_init_array>:
 8001e24:	b570      	push	{r4, r5, r6, lr}
 8001e26:	4d0d      	ldr	r5, [pc, #52]	; (8001e5c <__libc_init_array+0x38>)
 8001e28:	4c0d      	ldr	r4, [pc, #52]	; (8001e60 <__libc_init_array+0x3c>)
 8001e2a:	1b64      	subs	r4, r4, r5
 8001e2c:	10a4      	asrs	r4, r4, #2
 8001e2e:	2600      	movs	r6, #0
 8001e30:	42a6      	cmp	r6, r4
 8001e32:	d109      	bne.n	8001e48 <__libc_init_array+0x24>
 8001e34:	4d0b      	ldr	r5, [pc, #44]	; (8001e64 <__libc_init_array+0x40>)
 8001e36:	4c0c      	ldr	r4, [pc, #48]	; (8001e68 <__libc_init_array+0x44>)
 8001e38:	f000 f818 	bl	8001e6c <_init>
 8001e3c:	1b64      	subs	r4, r4, r5
 8001e3e:	10a4      	asrs	r4, r4, #2
 8001e40:	2600      	movs	r6, #0
 8001e42:	42a6      	cmp	r6, r4
 8001e44:	d105      	bne.n	8001e52 <__libc_init_array+0x2e>
 8001e46:	bd70      	pop	{r4, r5, r6, pc}
 8001e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e4c:	4798      	blx	r3
 8001e4e:	3601      	adds	r6, #1
 8001e50:	e7ee      	b.n	8001e30 <__libc_init_array+0xc>
 8001e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e56:	4798      	blx	r3
 8001e58:	3601      	adds	r6, #1
 8001e5a:	e7f2      	b.n	8001e42 <__libc_init_array+0x1e>
 8001e5c:	08001e9c 	.word	0x08001e9c
 8001e60:	08001e9c 	.word	0x08001e9c
 8001e64:	08001e9c 	.word	0x08001e9c
 8001e68:	08001ea0 	.word	0x08001ea0

08001e6c <_init>:
 8001e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6e:	bf00      	nop
 8001e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e72:	bc08      	pop	{r3}
 8001e74:	469e      	mov	lr, r3
 8001e76:	4770      	bx	lr

08001e78 <_fini>:
 8001e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7a:	bf00      	nop
 8001e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e7e:	bc08      	pop	{r3}
 8001e80:	469e      	mov	lr, r3
 8001e82:	4770      	bx	lr
