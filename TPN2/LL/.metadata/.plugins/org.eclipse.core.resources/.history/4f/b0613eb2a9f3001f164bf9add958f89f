
Blinky_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000278  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800040c  08000414  00010414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800040c  0800040c  00010414  2**0
                  CONTENTS
  4 .ARM          00000000  0800040c  0800040c  00010414  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800040c  08000414  00010414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000414  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000414  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010414  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010444  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009fa  00000000  00000000  00010487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002de  00000000  00000000  00010e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00011160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000058  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000debe  00000000  00000000  00011240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000bf6  00000000  00000000  0001f0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000507a8  00000000  00000000  0001fcf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000012c  00000000  00000000  0007049c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000705c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003f4 	.word	0x080003f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003f4 	.word	0x080003f4

080001d4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4313      	orrs	r3, r2
 80001e6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80001e8:	4b05      	ldr	r3, [pc, #20]	; (8000200 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4013      	ands	r3, r2
 80001f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001f2:	68fb      	ldr	r3, [r7, #12]
}
 80001f4:	bf00      	nop
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	40023800 	.word	0x40023800

08000204 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000204:	b480      	push	{r7}
 8000206:	b08b      	sub	sp, #44	; 0x2c
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000218:	697b      	ldr	r3, [r7, #20]
 800021a:	fa93 f3a3 	rbit	r3, r3
 800021e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000220:	693b      	ldr	r3, [r7, #16]
 8000222:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000224:	69bb      	ldr	r3, [r7, #24]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d101      	bne.n	800022e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800022a:	2320      	movs	r3, #32
 800022c:	e003      	b.n	8000236 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	fab3 f383 	clz	r3, r3
 8000234:	b2db      	uxtb	r3, r3
 8000236:	005b      	lsls	r3, r3, #1
 8000238:	2103      	movs	r1, #3
 800023a:	fa01 f303 	lsl.w	r3, r1, r3
 800023e:	43db      	mvns	r3, r3
 8000240:	401a      	ands	r2, r3
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000246:	6a3b      	ldr	r3, [r7, #32]
 8000248:	fa93 f3a3 	rbit	r3, r3
 800024c:	61fb      	str	r3, [r7, #28]
  return result;
 800024e:	69fb      	ldr	r3, [r7, #28]
 8000250:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000254:	2b00      	cmp	r3, #0
 8000256:	d101      	bne.n	800025c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000258:	2320      	movs	r3, #32
 800025a:	e003      	b.n	8000264 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800025e:	fab3 f383 	clz	r3, r3
 8000262:	b2db      	uxtb	r3, r3
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	6879      	ldr	r1, [r7, #4]
 8000268:	fa01 f303 	lsl.w	r3, r1, r3
 800026c:	431a      	orrs	r2, r3
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	601a      	str	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	372c      	adds	r7, #44	; 0x2c
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr

0800027e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800027e:	b480      	push	{r7}
 8000280:	b085      	sub	sp, #20
 8000282:	af00      	add	r7, sp, #0
 8000284:	6078      	str	r0, [r7, #4]
 8000286:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	4013      	ands	r3, r2
 8000294:	041a      	lsls	r2, r3, #16
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	43d9      	mvns	r1, r3
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	400b      	ands	r3, r1
 800029e:	431a      	orrs	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	619a      	str	r2, [r3, #24]
}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <main>:
#define LED2_GPIO_PORT                     GPIOA
#define LED2_GPIO_CLK_ENABLE()             LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA)

/*		Main		*/
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
  uint32_t i;

  /* GPIO Configuration	*/
  LED2_GPIO_CLK_ENABLE();
 80002b6:	2001      	movs	r0, #1
 80002b8:	f7ff ff8c 	bl	80001d4 <LL_AHB1_GRP1_EnableClock>
  LL_GPIO_SetPinMode(LED2_GPIO_PORT, LED2_PIN, LL_GPIO_MODE_OUTPUT);
 80002bc:	2201      	movs	r2, #1
 80002be:	2120      	movs	r1, #32
 80002c0:	4808      	ldr	r0, [pc, #32]	; (80002e4 <main+0x34>)
 80002c2:	f7ff ff9f 	bl	8000204 <LL_GPIO_SetPinMode>

  while (1)
  {
    LL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 80002c6:	2120      	movs	r1, #32
 80002c8:	4806      	ldr	r0, [pc, #24]	; (80002e4 <main+0x34>)
 80002ca:	f7ff ffd8 	bl	800027e <LL_GPIO_TogglePin>
    for(i=0; i<100000; i++);
 80002ce:	2300      	movs	r3, #0
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	e002      	b.n	80002da <main+0x2a>
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	3301      	adds	r3, #1
 80002d8:	607b      	str	r3, [r7, #4]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a02      	ldr	r2, [pc, #8]	; (80002e8 <main+0x38>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d9f8      	bls.n	80002d4 <main+0x24>
    LL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 80002e2:	e7f0      	b.n	80002c6 <main+0x16>
 80002e4:	40020000 	.word	0x40020000
 80002e8:	0001869f 	.word	0x0001869f

080002ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002f0:	4b16      	ldr	r3, [pc, #88]	; (800034c <SystemInit+0x60>)
 80002f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f6:	4a15      	ldr	r2, [pc, #84]	; (800034c <SystemInit+0x60>)
 80002f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000300:	4b13      	ldr	r3, [pc, #76]	; (8000350 <SystemInit+0x64>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a12      	ldr	r2, [pc, #72]	; (8000350 <SystemInit+0x64>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <SystemInit+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <SystemInit+0x64>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <SystemInit+0x64>)
 8000318:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800031c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000320:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <SystemInit+0x64>)
 8000324:	4a0b      	ldr	r2, [pc, #44]	; (8000354 <SystemInit+0x68>)
 8000326:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <SystemInit+0x64>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a08      	ldr	r2, [pc, #32]	; (8000350 <SystemInit+0x64>)
 800032e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000332:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <SystemInit+0x64>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800033a:	4b04      	ldr	r3, [pc, #16]	; (800034c <SystemInit+0x60>)
 800033c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000340:	609a      	str	r2, [r3, #8]
#endif
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	e000ed00 	.word	0xe000ed00
 8000350:	40023800 	.word	0x40023800
 8000354:	24003010 	.word	0x24003010

08000358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000390 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800035c:	f7ff ffc6 	bl	80002ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000360:	480c      	ldr	r0, [pc, #48]	; (8000394 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000362:	490d      	ldr	r1, [pc, #52]	; (8000398 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000364:	4a0d      	ldr	r2, [pc, #52]	; (800039c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0a      	ldr	r2, [pc, #40]	; (80003a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000378:	4c0a      	ldr	r4, [pc, #40]	; (80003a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000386:	f000 f811 	bl	80003ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800038a:	f7ff ff91 	bl	80002b0 <main>
  bx  lr    
 800038e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000390:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800039c:	08000414 	.word	0x08000414
  ldr r2, =_sbss
 80003a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a4:	2000001c 	.word	0x2000001c

080003a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC_IRQHandler>
	...

080003ac <__libc_init_array>:
 80003ac:	b570      	push	{r4, r5, r6, lr}
 80003ae:	4d0d      	ldr	r5, [pc, #52]	; (80003e4 <__libc_init_array+0x38>)
 80003b0:	4c0d      	ldr	r4, [pc, #52]	; (80003e8 <__libc_init_array+0x3c>)
 80003b2:	1b64      	subs	r4, r4, r5
 80003b4:	10a4      	asrs	r4, r4, #2
 80003b6:	2600      	movs	r6, #0
 80003b8:	42a6      	cmp	r6, r4
 80003ba:	d109      	bne.n	80003d0 <__libc_init_array+0x24>
 80003bc:	4d0b      	ldr	r5, [pc, #44]	; (80003ec <__libc_init_array+0x40>)
 80003be:	4c0c      	ldr	r4, [pc, #48]	; (80003f0 <__libc_init_array+0x44>)
 80003c0:	f000 f818 	bl	80003f4 <_init>
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	10a4      	asrs	r4, r4, #2
 80003c8:	2600      	movs	r6, #0
 80003ca:	42a6      	cmp	r6, r4
 80003cc:	d105      	bne.n	80003da <__libc_init_array+0x2e>
 80003ce:	bd70      	pop	{r4, r5, r6, pc}
 80003d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d4:	4798      	blx	r3
 80003d6:	3601      	adds	r6, #1
 80003d8:	e7ee      	b.n	80003b8 <__libc_init_array+0xc>
 80003da:	f855 3b04 	ldr.w	r3, [r5], #4
 80003de:	4798      	blx	r3
 80003e0:	3601      	adds	r6, #1
 80003e2:	e7f2      	b.n	80003ca <__libc_init_array+0x1e>
 80003e4:	0800040c 	.word	0x0800040c
 80003e8:	0800040c 	.word	0x0800040c
 80003ec:	0800040c 	.word	0x0800040c
 80003f0:	08000410 	.word	0x08000410

080003f4 <_init>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr

08000400 <_fini>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr
