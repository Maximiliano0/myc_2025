
Blinky_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000560  08000560  00010560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000570  08000570  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000570  08000570  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000570  08000570  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000570  08000570  00010570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000574  08000574  00010574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  0800057c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800057c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a10  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000304  00000000  00000000  00020a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00020d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000059  00000000  00000000  00020e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dec4  00000000  00000000  00020e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c19  00000000  00000000  0002ed35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000507c7  00000000  00000000  0002f94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000012c  00000000  00000000  00080118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00080244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000548 	.word	0x08000548

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000548 	.word	0x08000548

080001d4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4313      	orrs	r3, r2
 80001e6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80001e8:	4b05      	ldr	r3, [pc, #20]	; (8000200 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4013      	ands	r3, r2
 80001f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001f2:	68fb      	ldr	r3, [r7, #12]
}
 80001f4:	bf00      	nop
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	40023800 	.word	0x40023800

08000204 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000204:	b480      	push	{r7}
 8000206:	b08b      	sub	sp, #44	; 0x2c
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000218:	697b      	ldr	r3, [r7, #20]
 800021a:	fa93 f3a3 	rbit	r3, r3
 800021e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000220:	693b      	ldr	r3, [r7, #16]
 8000222:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000224:	69bb      	ldr	r3, [r7, #24]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d101      	bne.n	800022e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800022a:	2320      	movs	r3, #32
 800022c:	e003      	b.n	8000236 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	fab3 f383 	clz	r3, r3
 8000234:	b2db      	uxtb	r3, r3
 8000236:	005b      	lsls	r3, r3, #1
 8000238:	2103      	movs	r1, #3
 800023a:	fa01 f303 	lsl.w	r3, r1, r3
 800023e:	43db      	mvns	r3, r3
 8000240:	401a      	ands	r2, r3
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000246:	6a3b      	ldr	r3, [r7, #32]
 8000248:	fa93 f3a3 	rbit	r3, r3
 800024c:	61fb      	str	r3, [r7, #28]
  return result;
 800024e:	69fb      	ldr	r3, [r7, #28]
 8000250:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000254:	2b00      	cmp	r3, #0
 8000256:	d101      	bne.n	800025c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000258:	2320      	movs	r3, #32
 800025a:	e003      	b.n	8000264 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800025e:	fab3 f383 	clz	r3, r3
 8000262:	b2db      	uxtb	r3, r3
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	6879      	ldr	r1, [r7, #4]
 8000268:	fa01 f303 	lsl.w	r3, r1, r3
 800026c:	431a      	orrs	r2, r3
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	601a      	str	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	372c      	adds	r7, #44	; 0x2c
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr

0800027e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800027e:	b480      	push	{r7}
 8000280:	b085      	sub	sp, #20
 8000282:	af00      	add	r7, sp, #0
 8000284:	6078      	str	r0, [r7, #4]
 8000286:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	4013      	ands	r3, r2
 8000294:	041a      	lsls	r2, r3, #16
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	43d9      	mvns	r1, r3
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	400b      	ands	r3, r1
 800029e:	431a      	orrs	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	619a      	str	r2, [r3, #24]
}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <main>:
/*		Variables Globales		*/
extern uint32_t SystemCoreClock;

/*		Main		*/
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
  uint32_t nop;

  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <main+0x7c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a1c      	ldr	r2, [pc, #112]	; (800032c <main+0x7c>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <main+0x7c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <main+0x7c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a17      	ldr	r2, [pc, #92]	; (800032c <main+0x7c>)
 80002ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <main+0x7c>)
 80002da:	4a15      	ldr	r2, [pc, #84]	; (8000330 <main+0x80>)
 80002dc:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <main+0x7c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a12      	ldr	r2, [pc, #72]	; (800032c <main+0x7c>)
 80002e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <main+0x7c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	60da      	str	r2, [r3, #12]

  /* Register Configuration */
  SystemCoreClockUpdate();
 80002f0:	f000 f85c 	bl	80003ac <SystemCoreClockUpdate>

  /* GPIO Configuration	*/
  LED2_GPIO_CLK_ENABLE();
 80002f4:	2001      	movs	r0, #1
 80002f6:	f7ff ff6d 	bl	80001d4 <LL_AHB1_GRP1_EnableClock>
  LL_GPIO_SetPinMode(LED2_GPIO_PORT, LED2_PIN, LL_GPIO_MODE_OUTPUT);
 80002fa:	2201      	movs	r2, #1
 80002fc:	2120      	movs	r1, #32
 80002fe:	480d      	ldr	r0, [pc, #52]	; (8000334 <main+0x84>)
 8000300:	f7ff ff80 	bl	8000204 <LL_GPIO_SetPinMode>

  while (1)
  {
    LL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 8000304:	2120      	movs	r1, #32
 8000306:	480b      	ldr	r0, [pc, #44]	; (8000334 <main+0x84>)
 8000308:	f7ff ffb9 	bl	800027e <LL_GPIO_TogglePin>
    for(nop=0; nop < _msTicks(1,SystemCoreClock)/18; nop++);
 800030c:	2300      	movs	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	e002      	b.n	8000318 <main+0x68>
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	3301      	adds	r3, #1
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <main+0x88>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <main+0x8c>)
 800031e:	fba2 2303 	umull	r2, r3, r2, r3
 8000322:	0b9b      	lsrs	r3, r3, #14
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	429a      	cmp	r2, r3
 8000328:	d3f3      	bcc.n	8000312 <main+0x62>
    LL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 800032a:	e7eb      	b.n	8000304 <main+0x54>
 800032c:	40023800 	.word	0x40023800
 8000330:	24003010 	.word	0x24003010
 8000334:	40020000 	.word	0x40020000
 8000338:	20000000 	.word	0x20000000
 800033c:	e90452d5 	.word	0xe90452d5

08000340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <SystemInit+0x60>)
 8000346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800034a:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <SystemInit+0x60>)
 800034c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000354:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <SystemInit+0x64>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a12      	ldr	r2, [pc, #72]	; (80003a4 <SystemInit+0x64>)
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000360:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <SystemInit+0x64>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <SystemInit+0x64>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <SystemInit+0x64>)
 800036c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000374:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <SystemInit+0x64>)
 8000378:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <SystemInit+0x68>)
 800037a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <SystemInit+0x64>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <SystemInit+0x64>)
 8000382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000386:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <SystemInit+0x64>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800038e:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <SystemInit+0x60>)
 8000390:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000394:	609a      	str	r2, [r3, #8]
#endif
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	e000ed00 	.word	0xe000ed00
 80003a4:	40023800 	.word	0x40023800
 80003a8:	24003010 	.word	0x24003010

080003ac <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b087      	sub	sp, #28
 80003b0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]
 80003ba:	2302      	movs	r3, #2
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	2300      	movs	r3, #0
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	2302      	movs	r3, #2
 80003c4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003c6:	4b34      	ldr	r3, [pc, #208]	; (8000498 <SystemCoreClockUpdate+0xec>)
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	f003 030c 	and.w	r3, r3, #12
 80003ce:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	2b08      	cmp	r3, #8
 80003d4:	d011      	beq.n	80003fa <SystemCoreClockUpdate+0x4e>
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	2b08      	cmp	r3, #8
 80003da:	d844      	bhi.n	8000466 <SystemCoreClockUpdate+0xba>
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d003      	beq.n	80003ea <SystemCoreClockUpdate+0x3e>
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	2b04      	cmp	r3, #4
 80003e6:	d004      	beq.n	80003f2 <SystemCoreClockUpdate+0x46>
 80003e8:	e03d      	b.n	8000466 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80003ea:	4b2c      	ldr	r3, [pc, #176]	; (800049c <SystemCoreClockUpdate+0xf0>)
 80003ec:	4a2c      	ldr	r2, [pc, #176]	; (80004a0 <SystemCoreClockUpdate+0xf4>)
 80003ee:	601a      	str	r2, [r3, #0]
      break;
 80003f0:	e03d      	b.n	800046e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80003f2:	4b2a      	ldr	r3, [pc, #168]	; (800049c <SystemCoreClockUpdate+0xf0>)
 80003f4:	4a2b      	ldr	r2, [pc, #172]	; (80004a4 <SystemCoreClockUpdate+0xf8>)
 80003f6:	601a      	str	r2, [r3, #0]
      break;
 80003f8:	e039      	b.n	800046e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80003fa:	4b27      	ldr	r3, [pc, #156]	; (8000498 <SystemCoreClockUpdate+0xec>)
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	0d9b      	lsrs	r3, r3, #22
 8000400:	f003 0301 	and.w	r3, r3, #1
 8000404:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000406:	4b24      	ldr	r3, [pc, #144]	; (8000498 <SystemCoreClockUpdate+0xec>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800040e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d00c      	beq.n	8000430 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000416:	4a23      	ldr	r2, [pc, #140]	; (80004a4 <SystemCoreClockUpdate+0xf8>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	fbb2 f3f3 	udiv	r3, r2, r3
 800041e:	4a1e      	ldr	r2, [pc, #120]	; (8000498 <SystemCoreClockUpdate+0xec>)
 8000420:	6852      	ldr	r2, [r2, #4]
 8000422:	0992      	lsrs	r2, r2, #6
 8000424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000428:	fb02 f303 	mul.w	r3, r2, r3
 800042c:	617b      	str	r3, [r7, #20]
 800042e:	e00b      	b.n	8000448 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000430:	4a1b      	ldr	r2, [pc, #108]	; (80004a0 <SystemCoreClockUpdate+0xf4>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	fbb2 f3f3 	udiv	r3, r2, r3
 8000438:	4a17      	ldr	r2, [pc, #92]	; (8000498 <SystemCoreClockUpdate+0xec>)
 800043a:	6852      	ldr	r2, [r2, #4]
 800043c:	0992      	lsrs	r2, r2, #6
 800043e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000448:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SystemCoreClockUpdate+0xec>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	0c1b      	lsrs	r3, r3, #16
 800044e:	f003 0303 	and.w	r3, r3, #3
 8000452:	3301      	adds	r3, #1
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000458:	697a      	ldr	r2, [r7, #20]
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000460:	4a0e      	ldr	r2, [pc, #56]	; (800049c <SystemCoreClockUpdate+0xf0>)
 8000462:	6013      	str	r3, [r2, #0]
      break;
 8000464:	e003      	b.n	800046e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000466:	4b0d      	ldr	r3, [pc, #52]	; (800049c <SystemCoreClockUpdate+0xf0>)
 8000468:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <SystemCoreClockUpdate+0xf4>)
 800046a:	601a      	str	r2, [r3, #0]
      break;
 800046c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <SystemCoreClockUpdate+0xec>)
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	091b      	lsrs	r3, r3, #4
 8000474:	f003 030f 	and.w	r3, r3, #15
 8000478:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <SystemCoreClockUpdate+0xfc>)
 800047a:	5cd3      	ldrb	r3, [r2, r3]
 800047c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <SystemCoreClockUpdate+0xf0>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	693b      	ldr	r3, [r7, #16]
 8000484:	fa22 f303 	lsr.w	r3, r2, r3
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <SystemCoreClockUpdate+0xf0>)
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	371c      	adds	r7, #28
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	40023800 	.word	0x40023800
 800049c:	20000000 	.word	0x20000000
 80004a0:	00f42400 	.word	0x00f42400
 80004a4:	007a1200 	.word	0x007a1200
 80004a8:	08000560 	.word	0x08000560

080004ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80004b0:	f7ff ff46 	bl	8000340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004b4:	480c      	ldr	r0, [pc, #48]	; (80004e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004b6:	490d      	ldr	r1, [pc, #52]	; (80004ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004b8:	4a0d      	ldr	r2, [pc, #52]	; (80004f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004bc:	e002      	b.n	80004c4 <LoopCopyDataInit>

080004be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c2:	3304      	adds	r3, #4

080004c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c8:	d3f9      	bcc.n	80004be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ca:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004cc:	4c0a      	ldr	r4, [pc, #40]	; (80004f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d0:	e001      	b.n	80004d6 <LoopFillZerobss>

080004d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d4:	3204      	adds	r2, #4

080004d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d8:	d3fb      	bcc.n	80004d2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80004da:	f000 f811 	bl	8000500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004de:	f7ff fee7 	bl	80002b0 <main>
  bx  lr    
 80004e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004f0:	08000578 	.word	0x08000578
  ldr r2, =_sbss
 80004f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004f8:	20000020 	.word	0x20000020

080004fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004fc:	e7fe      	b.n	80004fc <ADC_IRQHandler>
	...

08000500 <__libc_init_array>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	4d0d      	ldr	r5, [pc, #52]	; (8000538 <__libc_init_array+0x38>)
 8000504:	4c0d      	ldr	r4, [pc, #52]	; (800053c <__libc_init_array+0x3c>)
 8000506:	1b64      	subs	r4, r4, r5
 8000508:	10a4      	asrs	r4, r4, #2
 800050a:	2600      	movs	r6, #0
 800050c:	42a6      	cmp	r6, r4
 800050e:	d109      	bne.n	8000524 <__libc_init_array+0x24>
 8000510:	4d0b      	ldr	r5, [pc, #44]	; (8000540 <__libc_init_array+0x40>)
 8000512:	4c0c      	ldr	r4, [pc, #48]	; (8000544 <__libc_init_array+0x44>)
 8000514:	f000 f818 	bl	8000548 <_init>
 8000518:	1b64      	subs	r4, r4, r5
 800051a:	10a4      	asrs	r4, r4, #2
 800051c:	2600      	movs	r6, #0
 800051e:	42a6      	cmp	r6, r4
 8000520:	d105      	bne.n	800052e <__libc_init_array+0x2e>
 8000522:	bd70      	pop	{r4, r5, r6, pc}
 8000524:	f855 3b04 	ldr.w	r3, [r5], #4
 8000528:	4798      	blx	r3
 800052a:	3601      	adds	r6, #1
 800052c:	e7ee      	b.n	800050c <__libc_init_array+0xc>
 800052e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000532:	4798      	blx	r3
 8000534:	3601      	adds	r6, #1
 8000536:	e7f2      	b.n	800051e <__libc_init_array+0x1e>
 8000538:	08000570 	.word	0x08000570
 800053c:	08000570 	.word	0x08000570
 8000540:	08000570 	.word	0x08000570
 8000544:	08000574 	.word	0x08000574

08000548 <_init>:
 8000548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054a:	bf00      	nop
 800054c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054e:	bc08      	pop	{r3}
 8000550:	469e      	mov	lr, r3
 8000552:	4770      	bx	lr

08000554 <_fini>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	bf00      	nop
 8000558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055a:	bc08      	pop	{r3}
 800055c:	469e      	mov	lr, r3
 800055e:	4770      	bx	lr
