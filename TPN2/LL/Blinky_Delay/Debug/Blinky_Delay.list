
Blinky_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800047c  08000484  00010484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800047c  0800047c  00010484  2**0
                  CONTENTS
  4 .ARM          00000000  0800047c  0800047c  00010484  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800047c  08000484  00010484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000480  08000480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000484  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000484  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010484  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000104b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b22  00000000  00000000  000104f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000033e  00000000  00000000  00011019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f0  00000000  00000000  00011358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a1  00000000  00000000  00011448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014838  00000000  00000000  000114e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000018cb  00000000  00000000  00025d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084f67  00000000  00000000  000275ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000258  00000000  00000000  000ac554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000ac7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000464 	.word	0x08000464

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000464 	.word	0x08000464

080001d4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4313      	orrs	r3, r2
 80001e6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80001e8:	4b05      	ldr	r3, [pc, #20]	; (8000200 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4013      	ands	r3, r2
 80001f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001f2:	68fb      	ldr	r3, [r7, #12]
}
 80001f4:	bf00      	nop
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	40023800 	.word	0x40023800

08000204 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000204:	b480      	push	{r7}
 8000206:	b08b      	sub	sp, #44	; 0x2c
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000218:	697b      	ldr	r3, [r7, #20]
 800021a:	fa93 f3a3 	rbit	r3, r3
 800021e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000220:	693b      	ldr	r3, [r7, #16]
 8000222:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000224:	69bb      	ldr	r3, [r7, #24]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d101      	bne.n	800022e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800022a:	2320      	movs	r3, #32
 800022c:	e003      	b.n	8000236 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800022e:	69bb      	ldr	r3, [r7, #24]
 8000230:	fab3 f383 	clz	r3, r3
 8000234:	b2db      	uxtb	r3, r3
 8000236:	005b      	lsls	r3, r3, #1
 8000238:	2103      	movs	r1, #3
 800023a:	fa01 f303 	lsl.w	r3, r1, r3
 800023e:	43db      	mvns	r3, r3
 8000240:	401a      	ands	r2, r3
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000246:	6a3b      	ldr	r3, [r7, #32]
 8000248:	fa93 f3a3 	rbit	r3, r3
 800024c:	61fb      	str	r3, [r7, #28]
  return result;
 800024e:	69fb      	ldr	r3, [r7, #28]
 8000250:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000254:	2b00      	cmp	r3, #0
 8000256:	d101      	bne.n	800025c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000258:	2320      	movs	r3, #32
 800025a:	e003      	b.n	8000264 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800025e:	fab3 f383 	clz	r3, r3
 8000262:	b2db      	uxtb	r3, r3
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	6879      	ldr	r1, [r7, #4]
 8000268:	fa01 f303 	lsl.w	r3, r1, r3
 800026c:	431a      	orrs	r2, r3
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	601a      	str	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	372c      	adds	r7, #44	; 0x2c
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr

0800027e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800027e:	b480      	push	{r7}
 8000280:	b085      	sub	sp, #20
 8000282:	af00      	add	r7, sp, #0
 8000284:	6078      	str	r0, [r7, #4]
 8000286:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	4013      	ands	r3, r2
 8000294:	041a      	lsls	r2, r3, #16
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	43d9      	mvns	r1, r3
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	400b      	ands	r3, r1
 800029e:	431a      	orrs	r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	619a      	str	r2, [r3, #24]
}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <main>:
#include "main.h"

void     Configure_GPIO(void);

int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
  uint32_t i;
  Configure_GPIO();
 80002b6:	f000 f813 	bl	80002e0 <Configure_GPIO>

  while (1)
  {
    LL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 80002ba:	2120      	movs	r1, #32
 80002bc:	4806      	ldr	r0, [pc, #24]	; (80002d8 <main+0x28>)
 80002be:	f7ff ffde 	bl	800027e <LL_GPIO_TogglePin>
    for(i=0; i<100000; i++);
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	e002      	b.n	80002ce <main+0x1e>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a02      	ldr	r2, [pc, #8]	; (80002dc <main+0x2c>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d9f8      	bls.n	80002c8 <main+0x18>
    LL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 80002d6:	e7f0      	b.n	80002ba <main+0xa>
 80002d8:	40020000 	.word	0x40020000
 80002dc:	0001869f 	.word	0x0001869f

080002e0 <Configure_GPIO>:
  }
}


void Configure_GPIO(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* Enable the LED2 Clock */
  LED2_GPIO_CLK_ENABLE();
 80002e4:	2001      	movs	r0, #1
 80002e6:	f7ff ff75 	bl	80001d4 <LL_AHB1_GRP1_EnableClock>

  /* Configure IO in output push-pull mode to drive external LED2 */
  LL_GPIO_SetPinMode(LED2_GPIO_PORT, LED2_PIN, LL_GPIO_MODE_OUTPUT);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2120      	movs	r1, #32
 80002ee:	4802      	ldr	r0, [pc, #8]	; (80002f8 <Configure_GPIO+0x18>)
 80002f0:	f7ff ff88 	bl	8000204 <LL_GPIO_SetPinMode>

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40020000 	.word	0x40020000

080002fc <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr

0800030a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800030e:	e7fe      	b.n	800030e <HardFault_Handler+0x4>

08000310 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000314:	e7fe      	b.n	8000314 <MemManage_Handler+0x4>

08000316 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800031a:	e7fe      	b.n	800031a <BusFault_Handler+0x4>

0800031c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000320:	e7fe      	b.n	8000320 <UsageFault_Handler+0x4>

08000322 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
	...

0800035c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <SystemInit+0x60>)
 8000362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000366:	4a15      	ldr	r2, [pc, #84]	; (80003bc <SystemInit+0x60>)
 8000368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800036c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000370:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <SystemInit+0x64>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a12      	ldr	r2, [pc, #72]	; (80003c0 <SystemInit+0x64>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <SystemInit+0x64>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <SystemInit+0x64>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <SystemInit+0x64>)
 8000388:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800038c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000390:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <SystemInit+0x64>)
 8000394:	4a0b      	ldr	r2, [pc, #44]	; (80003c4 <SystemInit+0x68>)
 8000396:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <SystemInit+0x64>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <SystemInit+0x64>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <SystemInit+0x64>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003aa:	4b04      	ldr	r3, [pc, #16]	; (80003bc <SystemInit+0x60>)
 80003ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003b0:	609a      	str	r2, [r3, #8]
#endif
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	40023800 	.word	0x40023800
 80003c4:	24003010 	.word	0x24003010

080003c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000400 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003cc:	f7ff ffc6 	bl	800035c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003d2:	490d      	ldr	r1, [pc, #52]	; (8000408 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003d4:	4a0d      	ldr	r2, [pc, #52]	; (800040c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d8:	e002      	b.n	80003e0 <LoopCopyDataInit>

080003da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003de:	3304      	adds	r3, #4

080003e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e4:	d3f9      	bcc.n	80003da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e6:	4a0a      	ldr	r2, [pc, #40]	; (8000410 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003e8:	4c0a      	ldr	r4, [pc, #40]	; (8000414 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ec:	e001      	b.n	80003f2 <LoopFillZerobss>

080003ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f0:	3204      	adds	r2, #4

080003f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f4:	d3fb      	bcc.n	80003ee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80003f6:	f000 f811 	bl	800041c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003fa:	f7ff ff59 	bl	80002b0 <main>
  bx  lr    
 80003fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000400:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000408:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800040c:	08000484 	.word	0x08000484
  ldr r2, =_sbss
 8000410:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000414:	2000001c 	.word	0x2000001c

08000418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000418:	e7fe      	b.n	8000418 <ADC_IRQHandler>
	...

0800041c <__libc_init_array>:
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	4d0d      	ldr	r5, [pc, #52]	; (8000454 <__libc_init_array+0x38>)
 8000420:	4c0d      	ldr	r4, [pc, #52]	; (8000458 <__libc_init_array+0x3c>)
 8000422:	1b64      	subs	r4, r4, r5
 8000424:	10a4      	asrs	r4, r4, #2
 8000426:	2600      	movs	r6, #0
 8000428:	42a6      	cmp	r6, r4
 800042a:	d109      	bne.n	8000440 <__libc_init_array+0x24>
 800042c:	4d0b      	ldr	r5, [pc, #44]	; (800045c <__libc_init_array+0x40>)
 800042e:	4c0c      	ldr	r4, [pc, #48]	; (8000460 <__libc_init_array+0x44>)
 8000430:	f000 f818 	bl	8000464 <_init>
 8000434:	1b64      	subs	r4, r4, r5
 8000436:	10a4      	asrs	r4, r4, #2
 8000438:	2600      	movs	r6, #0
 800043a:	42a6      	cmp	r6, r4
 800043c:	d105      	bne.n	800044a <__libc_init_array+0x2e>
 800043e:	bd70      	pop	{r4, r5, r6, pc}
 8000440:	f855 3b04 	ldr.w	r3, [r5], #4
 8000444:	4798      	blx	r3
 8000446:	3601      	adds	r6, #1
 8000448:	e7ee      	b.n	8000428 <__libc_init_array+0xc>
 800044a:	f855 3b04 	ldr.w	r3, [r5], #4
 800044e:	4798      	blx	r3
 8000450:	3601      	adds	r6, #1
 8000452:	e7f2      	b.n	800043a <__libc_init_array+0x1e>
 8000454:	0800047c 	.word	0x0800047c
 8000458:	0800047c 	.word	0x0800047c
 800045c:	0800047c 	.word	0x0800047c
 8000460:	08000480 	.word	0x08000480

08000464 <_init>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr

08000470 <_fini>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr
